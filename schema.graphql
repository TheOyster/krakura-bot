# The root query type which gives access points into the data universe.
type Query implements Node {
  # Exposes the root query type nested one level down. This is helpful for Relay 1
  # which can only query top level fields if they are in a particular form.
  query: Query!

  # The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  nodeId: ID!

  # Fetches an object given its globally unique `ID`.
  node(
    # The globally unique `ID`.
    nodeId: ID!
  ): Node

  # Reads and enables pagination through a set of `Account`.
  accounts(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): AccountsConnection

  # Reads and enables pagination through a set of `Block`.
  blocks(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): BlocksConnection

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection

  # Reads and enables pagination through a set of `DexDayDatum`.
  dexDayData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexDayDatum`.
    orderBy: [DexDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexDayDatumFilter
  ): DexDayDataConnection

  # Reads and enables pagination through a set of `Dex`.
  dexes(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Dex`.
    orderBy: [DexesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexFilter
  ): DexesConnection

  # Reads and enables pagination through a set of `Event`.
  events(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Event`.
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: EventFilter
  ): EventsConnection

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsics(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): ExtrinsicsConnection

  # Reads and enables pagination through a set of `HomaAction`.
  homaActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `HomaAction`.
    orderBy: [HomaActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: HomaActionFilter
  ): HomaActionsConnection

  # Reads and enables pagination through a set of `IncentiveAction`.
  incentiveActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `IncentiveAction`.
    orderBy: [IncentiveActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: IncentiveActionFilter
  ): IncentiveActionsConnection

  # Reads and enables pagination through a set of `LoanAction`.
  loanActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanAction`.
    orderBy: [LoanActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanActionFilter
  ): LoanActionsConnection

  # Reads and enables pagination through a set of `LoanParam`.
  loanParams(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParam`.
    orderBy: [LoanParamsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamFilter
  ): LoanParamsConnection

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistories(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection

  # Reads and enables pagination through a set of `LoanPosition`.
  loanPositions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanPosition`.
    orderBy: [LoanPositionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanPositionFilter
  ): LoanPositionsConnection

  # Reads and enables pagination through a set of `NFTAction`.
  nFTActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `NFTAction`.
    orderBy: [NftActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: NFTActionFilter
  ): NftActionsConnection

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection

  # Reads and enables pagination through a set of `PoolDayDatum`.
  poolDayData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection

  # Reads and enables pagination through a set of `PoolHourDatum`.
  poolHourData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection

  # Reads and enables pagination through a set of `Pool`.
  pools(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): PoolsConnection

  # Reads and enables pagination through a set of `PriceBundle`.
  priceBundles(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PriceBundle`.
    orderBy: [PriceBundlesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PriceBundleFilter
  ): PriceBundlesConnection

  # Reads and enables pagination through a set of `PriceRecord`.
  priceRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PriceRecord`.
    orderBy: [PriceRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PriceRecordFilter
  ): PriceRecordsConnection

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPools(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection

  # Reads and enables pagination through a set of `SystemConst`.
  systemConsts(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection

  # Reads and enables pagination through a set of `TokenDayDatum`.
  tokenDayData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `TokenDayDatum`.
    orderBy: [TokenDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenDayDatumFilter
  ): TokenDayDataConnection

  # Reads and enables pagination through a set of `Token`.
  tokens(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokensConnection

  # Reads and enables pagination through a set of `TotalLoanPosition`.
  totalLoanPositions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `TotalLoanPosition`.
    orderBy: [TotalLoanPositionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TotalLoanPositionFilter
  ): TotalLoanPositionsConnection

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection

  # Reads and enables pagination through a set of `UserProvision`.
  userProvisions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection
  account(id: String!): Account
  block(id: String!): Block
  call(id: String!): Call
  dexAction(id: String!): DexAction
  dexDayDatum(id: String!): DexDayDatum
  dex(id: String!): Dex
  event(id: String!): Event
  extrinsic(id: String!): Extrinsic
  homaAction(id: String!): HomaAction
  incentiveAction(id: String!): IncentiveAction
  loanAction(id: String!): LoanAction
  loanParam(id: String!): LoanParam
  loanParamsHistory(id: String!): LoanParamsHistory
  loanPosition(id: String!): LoanPosition
  nFTAction(id: String!): NFTAction
  oracleFeedRecord(id: String!): OracleFeedRecord
  poolDayDatum(id: String!): PoolDayDatum
  poolHourDatum(id: String!): PoolHourDatum
  pool(id: String!): Pool
  priceBundle(id: String!): PriceBundle
  priceRecord(id: String!): PriceRecord
  provisionPool(id: String!): ProvisionPool
  systemConst(id: String!): SystemConst
  tokenDayDatum(id: String!): TokenDayDatum
  token(id: String!): Token
  totalLoanPosition(id: String!): TotalLoanPosition
  transfer(id: String!): Transfer
  userProvision(id: String!): UserProvision

  # Reads a single `Account` using its globally unique `ID`.
  accountByNodeId(
    # The globally unique `ID` to be used in selecting a single `Account`.
    nodeId: ID!
  ): Account

  # Reads a single `Block` using its globally unique `ID`.
  blockByNodeId(
    # The globally unique `ID` to be used in selecting a single `Block`.
    nodeId: ID!
  ): Block

  # Reads a single `Call` using its globally unique `ID`.
  callByNodeId(
    # The globally unique `ID` to be used in selecting a single `Call`.
    nodeId: ID!
  ): Call

  # Reads a single `DexAction` using its globally unique `ID`.
  dexActionByNodeId(
    # The globally unique `ID` to be used in selecting a single `DexAction`.
    nodeId: ID!
  ): DexAction

  # Reads a single `DexDayDatum` using its globally unique `ID`.
  dexDayDatumByNodeId(
    # The globally unique `ID` to be used in selecting a single `DexDayDatum`.
    nodeId: ID!
  ): DexDayDatum

  # Reads a single `Dex` using its globally unique `ID`.
  dexByNodeId(
    # The globally unique `ID` to be used in selecting a single `Dex`.
    nodeId: ID!
  ): Dex

  # Reads a single `Event` using its globally unique `ID`.
  eventByNodeId(
    # The globally unique `ID` to be used in selecting a single `Event`.
    nodeId: ID!
  ): Event

  # Reads a single `Extrinsic` using its globally unique `ID`.
  extrinsicByNodeId(
    # The globally unique `ID` to be used in selecting a single `Extrinsic`.
    nodeId: ID!
  ): Extrinsic

  # Reads a single `HomaAction` using its globally unique `ID`.
  homaActionByNodeId(
    # The globally unique `ID` to be used in selecting a single `HomaAction`.
    nodeId: ID!
  ): HomaAction

  # Reads a single `IncentiveAction` using its globally unique `ID`.
  incentiveActionByNodeId(
    # The globally unique `ID` to be used in selecting a single `IncentiveAction`.
    nodeId: ID!
  ): IncentiveAction

  # Reads a single `LoanAction` using its globally unique `ID`.
  loanActionByNodeId(
    # The globally unique `ID` to be used in selecting a single `LoanAction`.
    nodeId: ID!
  ): LoanAction

  # Reads a single `LoanParam` using its globally unique `ID`.
  loanParamByNodeId(
    # The globally unique `ID` to be used in selecting a single `LoanParam`.
    nodeId: ID!
  ): LoanParam

  # Reads a single `LoanParamsHistory` using its globally unique `ID`.
  loanParamsHistoryByNodeId(
    # The globally unique `ID` to be used in selecting a single `LoanParamsHistory`.
    nodeId: ID!
  ): LoanParamsHistory

  # Reads a single `LoanPosition` using its globally unique `ID`.
  loanPositionByNodeId(
    # The globally unique `ID` to be used in selecting a single `LoanPosition`.
    nodeId: ID!
  ): LoanPosition

  # Reads a single `NFTAction` using its globally unique `ID`.
  nFTActionByNodeId(
    # The globally unique `ID` to be used in selecting a single `NFTAction`.
    nodeId: ID!
  ): NFTAction

  # Reads a single `OracleFeedRecord` using its globally unique `ID`.
  oracleFeedRecordByNodeId(
    # The globally unique `ID` to be used in selecting a single `OracleFeedRecord`.
    nodeId: ID!
  ): OracleFeedRecord

  # Reads a single `PoolDayDatum` using its globally unique `ID`.
  poolDayDatumByNodeId(
    # The globally unique `ID` to be used in selecting a single `PoolDayDatum`.
    nodeId: ID!
  ): PoolDayDatum

  # Reads a single `PoolHourDatum` using its globally unique `ID`.
  poolHourDatumByNodeId(
    # The globally unique `ID` to be used in selecting a single `PoolHourDatum`.
    nodeId: ID!
  ): PoolHourDatum

  # Reads a single `Pool` using its globally unique `ID`.
  poolByNodeId(
    # The globally unique `ID` to be used in selecting a single `Pool`.
    nodeId: ID!
  ): Pool

  # Reads a single `PriceBundle` using its globally unique `ID`.
  priceBundleByNodeId(
    # The globally unique `ID` to be used in selecting a single `PriceBundle`.
    nodeId: ID!
  ): PriceBundle

  # Reads a single `PriceRecord` using its globally unique `ID`.
  priceRecordByNodeId(
    # The globally unique `ID` to be used in selecting a single `PriceRecord`.
    nodeId: ID!
  ): PriceRecord

  # Reads a single `ProvisionPool` using its globally unique `ID`.
  provisionPoolByNodeId(
    # The globally unique `ID` to be used in selecting a single `ProvisionPool`.
    nodeId: ID!
  ): ProvisionPool

  # Reads a single `SystemConst` using its globally unique `ID`.
  systemConstByNodeId(
    # The globally unique `ID` to be used in selecting a single `SystemConst`.
    nodeId: ID!
  ): SystemConst

  # Reads a single `TokenDayDatum` using its globally unique `ID`.
  tokenDayDatumByNodeId(
    # The globally unique `ID` to be used in selecting a single `TokenDayDatum`.
    nodeId: ID!
  ): TokenDayDatum

  # Reads a single `Token` using its globally unique `ID`.
  tokenByNodeId(
    # The globally unique `ID` to be used in selecting a single `Token`.
    nodeId: ID!
  ): Token

  # Reads a single `TotalLoanPosition` using its globally unique `ID`.
  totalLoanPositionByNodeId(
    # The globally unique `ID` to be used in selecting a single `TotalLoanPosition`.
    nodeId: ID!
  ): TotalLoanPosition

  # Reads a single `Transfer` using its globally unique `ID`.
  transferByNodeId(
    # The globally unique `ID` to be used in selecting a single `Transfer`.
    nodeId: ID!
  ): Transfer

  # Reads a single `UserProvision` using its globally unique `ID`.
  userProvisionByNodeId(
    # The globally unique `ID` to be used in selecting a single `UserProvision`.
    nodeId: ID!
  ): UserProvision
  _metadata: _Metadata
}

# An object with a globally unique `ID`.
interface Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
}

# A connection to a list of `Account` values.
type AccountsConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account` and cursor to aid in pagination.
  edges: [AccountsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

type Account implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  txCount: BigFloat
  createAtBlockId: String

  # Reads a single `Block` that is related to this `Account`.
  createAtBlock: Block

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsics(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): ExtrinsicsConnection!

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection!

  # Reads and enables pagination through a set of `Transfer`.
  transferOut(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!

  # Reads and enables pagination through a set of `Transfer`.
  transferIn(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!

  # Reads and enables pagination through a set of `NFTAction`.
  nFTActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `NFTAction`.
    orderBy: [NftActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: NFTActionFilter
  ): NftActionsConnection!

  # Reads and enables pagination through a set of `LoanAction`.
  loanActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanAction`.
    orderBy: [LoanActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanActionFilter
  ): LoanActionsConnection!

  # Reads and enables pagination through a set of `IncentiveAction`.
  incentiveActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `IncentiveAction`.
    orderBy: [IncentiveActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: IncentiveActionFilter
  ): IncentiveActionsConnection!

  # Reads and enables pagination through a set of `HomaAction`.
  homaActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `HomaAction`.
    orderBy: [HomaActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: HomaActionFilter
  ): HomaActionsConnection!

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection!

  # Reads and enables pagination through a set of `LoanPosition`.
  position(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanPosition`.
    orderBy: [LoanPositionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanPositionFilter
  ): LoanPositionsConnection!

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByExtrinsicSignerIdAndBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByCallSignerIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): AccountExtrinsicsByCallSignerIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Call`.
  callsByCallSignerIdAndParentCallId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): AccountCallsByCallSignerIdAndParentCallIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByTransferFromIdAndToId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): AccountAccountsByTransferFromIdAndToIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByTransferFromIdAndTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): AccountTokensByTransferFromIdAndTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByTransferFromIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): AccountExtrinsicsByTransferFromIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Call`.
  callsByTransferFromIdAndCallId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): AccountCallsByTransferFromIdAndCallIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByTransferToIdAndFromId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): AccountAccountsByTransferToIdAndFromIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByTransferToIdAndTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): AccountTokensByTransferToIdAndTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByTransferToIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): AccountExtrinsicsByTransferToIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Call`.
  callsByTransferToIdAndCallId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): AccountCallsByTransferToIdAndCallIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByNFTActionAccountIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): AccountExtrinsicsByNftActionAccountIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByLoanActionAccountIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): AccountExtrinsicsByLoanActionAccountIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByIncentiveActionAccountIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): AccountExtrinsicsByIncentiveActionAccountIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByHomaActionAccountIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): AccountExtrinsicsByHomaActionAccountIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByOracleFeedRecordAccountIdAndTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): AccountTokensByOracleFeedRecordAccountIdAndTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByOracleFeedRecordAccountIdAndBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): AccountBlocksByOracleFeedRecordAccountIdAndBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByLoanPositionOwnerIdAndCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): AccountTokensByLoanPositionOwnerIdAndCollateralIdManyToManyConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolsByDexActionAccountIdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): AccountPoolsByDexActionAccountIdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByDexActionAccountIdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): AccountTokensByDexActionAccountIdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByDexActionAccountIdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): AccountTokensByDexActionAccountIdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByDexActionAccountIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): AccountExtrinsicsByDexActionAccountIdAndExtrinsicIdManyToManyConnection!
}

# A floating point number that requires more precision than IEEE 754 binary 64
scalar BigFloat

type Block implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  number: BigFloat
  timestamp: Datetime
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicRoot: String

  # Reads and enables pagination through a set of `Account`.
  accountsByCreateAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): AccountsConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsics(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): ExtrinsicsConnection!

  # Reads and enables pagination through a set of `Event`.
  events(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Event`.
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: EventFilter
  ): EventsConnection!

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection!

  # Reads and enables pagination through a set of `LoanParam`.
  loanParamsByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParam`.
    orderBy: [LoanParamsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamFilter
  ): LoanParamsConnection!

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistoriesByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection!

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistoriesByEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection!

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByExtrinsicBlockIdAndSignerId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByEventBlockIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByOracleFeedRecordBlockIdAndTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByOracleFeedRecordBlockIdAndTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByOracleFeedRecordBlockIdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): BlockAccountsByOracleFeedRecordBlockIdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByLoanParamStartAtBlockIdAndCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByLoanParamStartAtBlockIdAndCollateralIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByLoanParamsHistoryStartAtBlockIdAndCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByLoanParamsHistoryStartAtBlockIdAndCollateralIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByLoanParamsHistoryStartAtBlockIdAndEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): BlockBlocksByLoanParamsHistoryStartAtBlockIdAndEndAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByLoanParamsHistoryEndAtBlockIdAndCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByLoanParamsHistoryEndAtBlockIdAndCollateralIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByLoanParamsHistoryEndAtBlockIdAndStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): BlockBlocksByLoanParamsHistoryEndAtBlockIdAndStartAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolStartAtBlockIdAndPoolTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByProvisionPoolStartAtBlockIdAndPoolTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolStartAtBlockIdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByProvisionPoolStartAtBlockIdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolStartAtBlockIdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByProvisionPoolStartAtBlockIdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByProvisionPoolStartAtBlockIdAndEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): BlockBlocksByProvisionPoolStartAtBlockIdAndEndAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolEndAtBlockIdAndPoolTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByProvisionPoolEndAtBlockIdAndPoolTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolEndAtBlockIdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByProvisionPoolEndAtBlockIdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolEndAtBlockIdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): BlockTokensByProvisionPoolEndAtBlockIdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByProvisionPoolEndAtBlockIdAndStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): BlockBlocksByProvisionPoolEndAtBlockIdAndStartAtBlockIdManyToManyConnection!
}

# A point in time as described by the [ISO
# 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
scalar Datetime

# A location in a connection that can be used for resuming pagination.
scalar Cursor

# Methods to use when ordering `Account`.
enum AccountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TX_COUNT_ASC
  TX_COUNT_DESC
  CREATE_AT_BLOCK_ID_ASC
  CREATE_AT_BLOCK_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `Account` object types. All fields are combined with a logical ‘and.’
input AccountFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `txCount` field.
  txCount: BigFloatFilter

  # Filter by the object’s `createAtBlockId` field.
  createAtBlockId: StringFilter

  # Checks for all expressions in this list.
  and: [AccountFilter!]

  # Checks for any expressions in this list.
  or: [AccountFilter!]

  # Negates the expression.
  not: AccountFilter
}

# A filter to be used against String fields. All fields are combined with a logical ‘and.’
input StringFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: String

  # Not equal to the specified value.
  notEqualTo: String

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: String

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: String

  # Included in the specified list.
  in: [String!]

  # Not included in the specified list.
  notIn: [String!]

  # Less than the specified value.
  lessThan: String

  # Less than or equal to the specified value.
  lessThanOrEqualTo: String

  # Greater than the specified value.
  greaterThan: String

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: String

  # Contains the specified string (case-sensitive).
  includes: String

  # Does not contain the specified string (case-sensitive).
  notIncludes: String

  # Contains the specified string (case-insensitive).
  includesInsensitive: String

  # Does not contain the specified string (case-insensitive).
  notIncludesInsensitive: String

  # Starts with the specified string (case-sensitive).
  startsWith: String

  # Does not start with the specified string (case-sensitive).
  notStartsWith: String

  # Starts with the specified string (case-insensitive).
  startsWithInsensitive: String

  # Does not start with the specified string (case-insensitive).
  notStartsWithInsensitive: String

  # Ends with the specified string (case-sensitive).
  endsWith: String

  # Does not end with the specified string (case-sensitive).
  notEndsWith: String

  # Ends with the specified string (case-insensitive).
  endsWithInsensitive: String

  # Does not end with the specified string (case-insensitive).
  notEndsWithInsensitive: String

  # Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  like: String

  # Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  notLike: String

  # Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  likeInsensitive: String

  # Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  notLikeInsensitive: String

  # Equal to the specified value (case-insensitive).
  equalToInsensitive: String

  # Not equal to the specified value (case-insensitive).
  notEqualToInsensitive: String

  # Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  distinctFromInsensitive: String

  # Equal to the specified value, treating null like an ordinary value (case-insensitive).
  notDistinctFromInsensitive: String

  # Included in the specified list (case-insensitive).
  inInsensitive: [String!]

  # Not included in the specified list (case-insensitive).
  notInInsensitive: [String!]

  # Less than the specified value (case-insensitive).
  lessThanInsensitive: String

  # Less than or equal to the specified value (case-insensitive).
  lessThanOrEqualToInsensitive: String

  # Greater than the specified value (case-insensitive).
  greaterThanInsensitive: String

  # Greater than or equal to the specified value (case-insensitive).
  greaterThanOrEqualToInsensitive: String
}

# A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
input BigFloatFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: BigFloat

  # Not equal to the specified value.
  notEqualTo: BigFloat

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: BigFloat

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: BigFloat

  # Included in the specified list.
  in: [BigFloat!]

  # Not included in the specified list.
  notIn: [BigFloat!]

  # Less than the specified value.
  lessThan: BigFloat

  # Less than or equal to the specified value.
  lessThanOrEqualTo: BigFloat

  # Greater than the specified value.
  greaterThan: BigFloat

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: BigFloat
}

# A connection to a list of `Extrinsic` values.
type ExtrinsicsConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic` and cursor to aid in pagination.
  edges: [ExtrinsicsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

type Extrinsic implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  method: String
  section: String
  args: JSON
  signerId: String
  nonce: BigFloat
  timestamp: Datetime
  signature: String
  tip: String
  isSigned: Boolean
  isSuccess: Boolean
  blockId: String

  # Reads a single `Account` that is related to this `Extrinsic`.
  signer: Account

  # Reads a single `Block` that is related to this `Extrinsic`.
  block: Block

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection!

  # Reads and enables pagination through a set of `Event`.
  events(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Event`.
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: EventFilter
  ): EventsConnection!

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!

  # Reads and enables pagination through a set of `NFTAction`.
  nFTActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `NFTAction`.
    orderBy: [NftActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: NFTActionFilter
  ): NftActionsConnection!

  # Reads and enables pagination through a set of `LoanAction`.
  loanActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanAction`.
    orderBy: [LoanActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanActionFilter
  ): LoanActionsConnection!

  # Reads and enables pagination through a set of `IncentiveAction`.
  incentiveActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `IncentiveAction`.
    orderBy: [IncentiveActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: IncentiveActionFilter
  ): IncentiveActionsConnection!

  # Reads and enables pagination through a set of `HomaAction`.
  homaActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `HomaAction`.
    orderBy: [HomaActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: HomaActionFilter
  ): HomaActionsConnection!

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByCallExtrinsicIdAndSignerId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): ExtrinsicAccountsByCallExtrinsicIdAndSignerIdManyToManyConnection!

  # Reads and enables pagination through a set of `Call`.
  callsByCallExtrinsicIdAndParentCallId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): ExtrinsicCallsByCallExtrinsicIdAndParentCallIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByEventExtrinsicIdAndBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByTransferExtrinsicIdAndFromId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): ExtrinsicAccountsByTransferExtrinsicIdAndFromIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByTransferExtrinsicIdAndToId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): ExtrinsicAccountsByTransferExtrinsicIdAndToIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByTransferExtrinsicIdAndTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): ExtrinsicTokensByTransferExtrinsicIdAndTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Call`.
  callsByTransferExtrinsicIdAndCallId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): ExtrinsicCallsByTransferExtrinsicIdAndCallIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByNFTActionExtrinsicIdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): ExtrinsicAccountsByNftActionExtrinsicIdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByLoanActionExtrinsicIdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): ExtrinsicAccountsByLoanActionExtrinsicIdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByIncentiveActionExtrinsicIdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): ExtrinsicAccountsByIncentiveActionExtrinsicIdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByHomaActionExtrinsicIdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): ExtrinsicAccountsByHomaActionExtrinsicIdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByDexActionExtrinsicIdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): ExtrinsicAccountsByDexActionExtrinsicIdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolsByDexActionExtrinsicIdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): ExtrinsicPoolsByDexActionExtrinsicIdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByDexActionExtrinsicIdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): ExtrinsicTokensByDexActionExtrinsicIdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByDexActionExtrinsicIdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): ExtrinsicTokensByDexActionExtrinsicIdAndToken1IdManyToManyConnection!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A connection to a list of `Call` values.
type CallsConnection {
  # A list of `Call` objects.
  nodes: [Call]!

  # A list of edges which contains the `Call` and cursor to aid in pagination.
  edges: [CallsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Call` you could get from the connection.
  totalCount: Int!
}

type Call implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  section: String
  method: String
  args: JSON
  timestamp: Datetime
  isSuccess: Boolean
  signerId: String
  extrinsicId: String
  parentCallId: String

  # Reads a single `Account` that is related to this `Call`.
  signer: Account

  # Reads a single `Extrinsic` that is related to this `Call`.
  extrinsic: Extrinsic

  # Reads a single `Call` that is related to this `Call`.
  parentCall: Call

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection!

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByCallParentCallIdAndSignerId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): CallAccountsByCallParentCallIdAndSignerIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByCallParentCallIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): CallExtrinsicsByCallParentCallIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByTransferCallIdAndFromId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): CallAccountsByTransferCallIdAndFromIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByTransferCallIdAndToId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): CallAccountsByTransferCallIdAndToIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByTransferCallIdAndTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): CallTokensByTransferCallIdAndTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByTransferCallIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): CallExtrinsicsByTransferCallIdAndExtrinsicIdManyToManyConnection!
}

# Methods to use when ordering `Call`.
enum CallsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SECTION_ASC
  SECTION_DESC
  METHOD_ASC
  METHOD_DESC
  ARGS_ASC
  ARGS_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  IS_SUCCESS_ASC
  IS_SUCCESS_DESC
  SIGNER_ID_ASC
  SIGNER_ID_DESC
  EXTRINSIC_ID_ASC
  EXTRINSIC_ID_DESC
  PARENT_CALL_ID_ASC
  PARENT_CALL_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `Call` object types. All fields are combined with a logical ‘and.’
input CallFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `section` field.
  section: StringFilter

  # Filter by the object’s `method` field.
  method: StringFilter

  # Filter by the object’s `args` field.
  args: JSONFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Filter by the object’s `isSuccess` field.
  isSuccess: BooleanFilter

  # Filter by the object’s `signerId` field.
  signerId: StringFilter

  # Filter by the object’s `extrinsicId` field.
  extrinsicId: StringFilter

  # Filter by the object’s `parentCallId` field.
  parentCallId: StringFilter

  # Checks for all expressions in this list.
  and: [CallFilter!]

  # Checks for any expressions in this list.
  or: [CallFilter!]

  # Negates the expression.
  not: CallFilter
}

# A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
input JSONFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: JSON

  # Not equal to the specified value.
  notEqualTo: JSON

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: JSON

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: JSON

  # Included in the specified list.
  in: [JSON!]

  # Not included in the specified list.
  notIn: [JSON!]

  # Less than the specified value.
  lessThan: JSON

  # Less than or equal to the specified value.
  lessThanOrEqualTo: JSON

  # Greater than the specified value.
  greaterThan: JSON

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: JSON

  # Contains the specified JSON.
  contains: JSON

  # Contains the specified key.
  containsKey: String

  # Contains all of the specified keys.
  containsAllKeys: [String!]

  # Contains any of the specified keys.
  containsAnyKeys: [String!]

  # Contained by the specified JSON.
  containedBy: JSON
}

# A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
input DatetimeFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: Datetime

  # Not equal to the specified value.
  notEqualTo: Datetime

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: Datetime

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: Datetime

  # Included in the specified list.
  in: [Datetime!]

  # Not included in the specified list.
  notIn: [Datetime!]

  # Less than the specified value.
  lessThan: Datetime

  # Less than or equal to the specified value.
  lessThanOrEqualTo: Datetime

  # Greater than the specified value.
  greaterThan: Datetime

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: Datetime
}

# A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
input BooleanFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: Boolean

  # Not equal to the specified value.
  notEqualTo: Boolean

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: Boolean

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: Boolean

  # Included in the specified list.
  in: [Boolean!]

  # Not included in the specified list.
  notIn: [Boolean!]

  # Less than the specified value.
  lessThan: Boolean

  # Less than or equal to the specified value.
  lessThanOrEqualTo: Boolean

  # Greater than the specified value.
  greaterThan: Boolean

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: Boolean
}

# A connection to a list of `Transfer` values.
type TransfersConnection {
  # A list of `Transfer` objects.
  nodes: [Transfer]!

  # A list of edges which contains the `Transfer` and cursor to aid in pagination.
  edges: [TransfersEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Transfer` you could get from the connection.
  totalCount: Int!
}

type Transfer implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  fromId: String
  toId: String
  tokenId: String
  amount: String
  amountInUSD: String
  extrinsicId: String
  callId: String
  timestamp: Datetime
  isSuccess: Boolean

  # Reads a single `Account` that is related to this `Transfer`.
  from: Account

  # Reads a single `Account` that is related to this `Transfer`.
  to: Account

  # Reads a single `Token` that is related to this `Transfer`.
  token: Token

  # Reads a single `Extrinsic` that is related to this `Transfer`.
  extrinsic: Extrinsic

  # Reads a single `Call` that is related to this `Transfer`.
  call: Call
}

type Token implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  name: String
  decimal: Int
  price: String
  issuance: String
  lockedInLoan: String
  lockedInDex: String
  lockedInIncentive: String
  volume: String
  volumeUSD: String
  txCount: BigFloat

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByLiquidTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByStakignTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByNativeTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByStableTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection!

  # Reads and enables pagination through a set of `TokenDayDatum`.
  dayData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `TokenDayDatum`.
    orderBy: [TokenDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenDayDatumFilter
  ): TokenDayDataConnection!

  # Reads and enables pagination through a set of `LoanPosition`.
  loanPositionsByCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanPosition`.
    orderBy: [LoanPositionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanPositionFilter
  ): LoanPositionsConnection!

  # Reads and enables pagination through a set of `TotalLoanPosition`.
  totalLoanPositionsByCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `TotalLoanPosition`.
    orderBy: [TotalLoanPositionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TotalLoanPositionFilter
  ): TotalLoanPositionsConnection!

  # Reads and enables pagination through a set of `LoanParam`.
  loanParamsByCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParam`.
    orderBy: [LoanParamsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamFilter
  ): LoanParamsConnection!

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistoriesByCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection!

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByPoolTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!

  # Reads and enables pagination through a set of `UserProvision`.
  userProvisionsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection!

  # Reads and enables pagination through a set of `UserProvision`.
  userProvisionsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolBase(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): PoolsConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolQuote(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): PoolsConnection!

  # Reads and enables pagination through a set of `PoolHourDatum`.
  poolHourDataByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection!

  # Reads and enables pagination through a set of `PoolHourDatum`.
  poolHourDataByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection!

  # Reads and enables pagination through a set of `PoolDayDatum`.
  poolDayDataBase(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection!

  # Reads and enables pagination through a set of `PoolDayDatum`.
  poolDayDataQuote(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection!

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstLiquidTokenIdAndStakignTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstLiquidTokenIdAndStakignTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstLiquidTokenIdAndNativeTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstLiquidTokenIdAndNativeTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstLiquidTokenIdAndStableTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstLiquidTokenIdAndStableTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstStakignTokenIdAndLiquidTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstStakignTokenIdAndLiquidTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstStakignTokenIdAndNativeTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstStakignTokenIdAndNativeTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstStakignTokenIdAndStableTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstStakignTokenIdAndStableTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstNativeTokenIdAndLiquidTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstNativeTokenIdAndLiquidTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstNativeTokenIdAndStakignTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstNativeTokenIdAndStakignTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstNativeTokenIdAndStableTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstNativeTokenIdAndStableTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstStableTokenIdAndLiquidTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstStableTokenIdAndLiquidTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstStableTokenIdAndStakignTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstStableTokenIdAndStakignTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensBySystemConstStableTokenIdAndNativeTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensBySystemConstStableTokenIdAndNativeTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByTransferTokenIdAndFromId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): TokenAccountsByTransferTokenIdAndFromIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByTransferTokenIdAndToId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): TokenAccountsByTransferTokenIdAndToIdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByTransferTokenIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): TokenExtrinsicsByTransferTokenIdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Call`.
  callsByTransferTokenIdAndCallId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): TokenCallsByTransferTokenIdAndCallIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByOracleFeedRecordTokenIdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): TokenAccountsByOracleFeedRecordTokenIdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByOracleFeedRecordTokenIdAndBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByOracleFeedRecordTokenIdAndBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByLoanPositionCollateralIdAndOwnerId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): TokenAccountsByLoanPositionCollateralIdAndOwnerIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByLoanParamCollateralIdAndStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByLoanParamCollateralIdAndStartAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByLoanParamsHistoryCollateralIdAndStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByLoanParamsHistoryCollateralIdAndStartAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByLoanParamsHistoryCollateralIdAndEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByLoanParamsHistoryCollateralIdAndEndAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolPoolTokenIdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByProvisionPoolPoolTokenIdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolPoolTokenIdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByProvisionPoolPoolTokenIdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByProvisionPoolPoolTokenIdAndStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByProvisionPoolPoolTokenIdAndStartAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByProvisionPoolPoolTokenIdAndEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByProvisionPoolPoolTokenIdAndEndAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolToken0IdAndPoolTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByProvisionPoolToken0IdAndPoolTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolToken0IdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByProvisionPoolToken0IdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByProvisionPoolToken0IdAndStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByProvisionPoolToken0IdAndStartAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByProvisionPoolToken0IdAndEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByProvisionPoolToken0IdAndEndAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolToken1IdAndPoolTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByProvisionPoolToken1IdAndPoolTokenIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByProvisionPoolToken1IdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByProvisionPoolToken1IdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByProvisionPoolToken1IdAndStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByProvisionPoolToken1IdAndStartAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `Block`.
  blocksByProvisionPoolToken1IdAndEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Block`.
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: BlockFilter
  ): TokenBlocksByProvisionPoolToken1IdAndEndAtBlockIdManyToManyConnection!

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByUserProvisionToken0IdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): TokenProvisionPoolsByUserProvisionToken0IdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByUserProvisionToken0IdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByUserProvisionToken0IdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByUserProvisionToken1IdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): TokenProvisionPoolsByUserProvisionToken1IdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByUserProvisionToken1IdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByUserProvisionToken1IdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolToken0IdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByPoolToken0IdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolToken1IdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByPoolToken1IdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolsByPoolHourDatumToken0IdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): TokenPoolsByPoolHourDatumToken0IdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolHourDatumToken0IdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByPoolHourDatumToken0IdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolsByPoolHourDatumToken1IdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): TokenPoolsByPoolHourDatumToken1IdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolHourDatumToken1IdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByPoolHourDatumToken1IdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolsByPoolDayDatumToken0IdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): TokenPoolsByPoolDayDatumToken0IdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolDayDatumToken0IdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByPoolDayDatumToken0IdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolsByPoolDayDatumToken1IdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): TokenPoolsByPoolDayDatumToken1IdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolDayDatumToken1IdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByPoolDayDatumToken1IdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByDexActionToken0IdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): TokenAccountsByDexActionToken0IdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolsByDexActionToken0IdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): TokenPoolsByDexActionToken0IdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByDexActionToken0IdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByDexActionToken0IdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByDexActionToken0IdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): TokenExtrinsicsByDexActionToken0IdAndExtrinsicIdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByDexActionToken1IdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): TokenAccountsByDexActionToken1IdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Pool`.
  poolsByDexActionToken1IdAndPoolId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): TokenPoolsByDexActionToken1IdAndPoolIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByDexActionToken1IdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): TokenTokensByDexActionToken1IdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByDexActionToken1IdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): TokenExtrinsicsByDexActionToken1IdAndExtrinsicIdManyToManyConnection!
}

# A connection to a list of `SystemConst` values.
type SystemConstsConnection {
  # A list of `SystemConst` objects.
  nodes: [SystemConst]!

  # A list of edges which contains the `SystemConst` and cursor to aid in pagination.
  edges: [SystemConstsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `SystemConst` you could get from the connection.
  totalCount: Int!
}

type SystemConst implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  liquidTokenId: String
  stakignTokenId: String
  nativeTokenId: String
  stableTokenId: String

  # Reads a single `Token` that is related to this `SystemConst`.
  liquidToken: Token

  # Reads a single `Token` that is related to this `SystemConst`.
  stakignToken: Token

  # Reads a single `Token` that is related to this `SystemConst`.
  nativeToken: Token

  # Reads a single `Token` that is related to this `SystemConst`.
  stableToken: Token
}

# A `SystemConst` edge in the connection.
type SystemConstsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `SystemConst` at the end of the edge.
  node: SystemConst
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: Cursor

  # When paginating forwards, the cursor to continue.
  endCursor: Cursor
}

# Methods to use when ordering `SystemConst`.
enum SystemConstsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LIQUID_TOKEN_ID_ASC
  LIQUID_TOKEN_ID_DESC
  STAKIGN_TOKEN_ID_ASC
  STAKIGN_TOKEN_ID_DESC
  NATIVE_TOKEN_ID_ASC
  NATIVE_TOKEN_ID_DESC
  STABLE_TOKEN_ID_ASC
  STABLE_TOKEN_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `SystemConst` object types. All fields are combined with a logical ‘and.’
input SystemConstFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `liquidTokenId` field.
  liquidTokenId: StringFilter

  # Filter by the object’s `stakignTokenId` field.
  stakignTokenId: StringFilter

  # Filter by the object’s `nativeTokenId` field.
  nativeTokenId: StringFilter

  # Filter by the object’s `stableTokenId` field.
  stableTokenId: StringFilter

  # Checks for all expressions in this list.
  and: [SystemConstFilter!]

  # Checks for any expressions in this list.
  or: [SystemConstFilter!]

  # Negates the expression.
  not: SystemConstFilter
}

# Methods to use when ordering `Transfer`.
enum TransfersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FROM_ID_ASC
  FROM_ID_DESC
  TO_ID_ASC
  TO_ID_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  AMOUNT_IN_U_S_D_ASC
  AMOUNT_IN_U_S_D_DESC
  EXTRINSIC_ID_ASC
  EXTRINSIC_ID_DESC
  CALL_ID_ASC
  CALL_ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  IS_SUCCESS_ASC
  IS_SUCCESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `Transfer` object types. All fields are combined with a logical ‘and.’
input TransferFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `fromId` field.
  fromId: StringFilter

  # Filter by the object’s `toId` field.
  toId: StringFilter

  # Filter by the object’s `tokenId` field.
  tokenId: StringFilter

  # Filter by the object’s `amount` field.
  amount: StringFilter

  # Filter by the object’s `amountInUSD` field.
  amountInUSD: StringFilter

  # Filter by the object’s `extrinsicId` field.
  extrinsicId: StringFilter

  # Filter by the object’s `callId` field.
  callId: StringFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Filter by the object’s `isSuccess` field.
  isSuccess: BooleanFilter

  # Checks for all expressions in this list.
  and: [TransferFilter!]

  # Checks for any expressions in this list.
  or: [TransferFilter!]

  # Negates the expression.
  not: TransferFilter
}

# A connection to a list of `OracleFeedRecord` values.
type OracleFeedRecordsConnection {
  # A list of `OracleFeedRecord` objects.
  nodes: [OracleFeedRecord]!

  # A list of edges which contains the `OracleFeedRecord` and cursor to aid in pagination.
  edges: [OracleFeedRecordsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `OracleFeedRecord` you could get from the connection.
  totalCount: Int!
}

type OracleFeedRecord implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  tokenId: String
  price: String
  provider: String
  accountId: String
  blockNumber: BigFloat
  blockId: String

  # Reads a single `Token` that is related to this `OracleFeedRecord`.
  token: Token

  # Reads a single `Account` that is related to this `OracleFeedRecord`.
  account: Account

  # Reads a single `Block` that is related to this `OracleFeedRecord`.
  block: Block
}

# A `OracleFeedRecord` edge in the connection.
type OracleFeedRecordsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `OracleFeedRecord` at the end of the edge.
  node: OracleFeedRecord
}

# Methods to use when ordering `OracleFeedRecord`.
enum OracleFeedRecordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  PRICE_ASC
  PRICE_DESC
  PROVIDER_ASC
  PROVIDER_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  BLOCK_NUMBER_ASC
  BLOCK_NUMBER_DESC
  BLOCK_ID_ASC
  BLOCK_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `OracleFeedRecord` object types. All fields are combined with a logical ‘and.’
input OracleFeedRecordFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `tokenId` field.
  tokenId: StringFilter

  # Filter by the object’s `price` field.
  price: StringFilter

  # Filter by the object’s `provider` field.
  provider: StringFilter

  # Filter by the object’s `accountId` field.
  accountId: StringFilter

  # Filter by the object’s `blockNumber` field.
  blockNumber: BigFloatFilter

  # Filter by the object’s `blockId` field.
  blockId: StringFilter

  # Checks for all expressions in this list.
  and: [OracleFeedRecordFilter!]

  # Checks for any expressions in this list.
  or: [OracleFeedRecordFilter!]

  # Negates the expression.
  not: OracleFeedRecordFilter
}

# A connection to a list of `TokenDayDatum` values.
type TokenDayDataConnection {
  # A list of `TokenDayDatum` objects.
  nodes: [TokenDayDatum]!

  # A list of edges which contains the `TokenDayDatum` and cursor to aid in pagination.
  edges: [TokenDayDataEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `TokenDayDatum` you could get from the connection.
  totalCount: Int!
}

type TokenDayDatum implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  date: Datetime
  tokenId: String
  price: String
  dailyVolumeToken: String
  dailyVolumeUSD: String
  dailyTxCount: BigFloat

  # Reads a single `Token` that is related to this `TokenDayDatum`.
  token: Token
}

# A `TokenDayDatum` edge in the connection.
type TokenDayDataEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `TokenDayDatum` at the end of the edge.
  node: TokenDayDatum
}

# Methods to use when ordering `TokenDayDatum`.
enum TokenDayDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DATE_ASC
  DATE_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  PRICE_ASC
  PRICE_DESC
  DAILY_VOLUME_TOKEN_ASC
  DAILY_VOLUME_TOKEN_DESC
  DAILY_VOLUME_U_S_D_ASC
  DAILY_VOLUME_U_S_D_DESC
  DAILY_TX_COUNT_ASC
  DAILY_TX_COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `TokenDayDatum` object types. All fields are combined with a logical ‘and.’
input TokenDayDatumFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `date` field.
  date: DatetimeFilter

  # Filter by the object’s `tokenId` field.
  tokenId: StringFilter

  # Filter by the object’s `price` field.
  price: StringFilter

  # Filter by the object’s `dailyVolumeToken` field.
  dailyVolumeToken: StringFilter

  # Filter by the object’s `dailyVolumeUSD` field.
  dailyVolumeUSD: StringFilter

  # Filter by the object’s `dailyTxCount` field.
  dailyTxCount: BigFloatFilter

  # Checks for all expressions in this list.
  and: [TokenDayDatumFilter!]

  # Checks for any expressions in this list.
  or: [TokenDayDatumFilter!]

  # Negates the expression.
  not: TokenDayDatumFilter
}

# A connection to a list of `LoanPosition` values.
type LoanPositionsConnection {
  # A list of `LoanPosition` objects.
  nodes: [LoanPosition]!

  # A list of edges which contains the `LoanPosition` and cursor to aid in pagination.
  edges: [LoanPositionsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `LoanPosition` you could get from the connection.
  totalCount: Int!
}

type LoanPosition implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  ownerId: String
  collateralId: String
  debitAmount: String
  collateralAmount: String

  # Reads a single `Account` that is related to this `LoanPosition`.
  owner: Account

  # Reads a single `Token` that is related to this `LoanPosition`.
  collateral: Token
}

# A `LoanPosition` edge in the connection.
type LoanPositionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `LoanPosition` at the end of the edge.
  node: LoanPosition
}

# Methods to use when ordering `LoanPosition`.
enum LoanPositionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  COLLATERAL_ID_ASC
  COLLATERAL_ID_DESC
  DEBIT_AMOUNT_ASC
  DEBIT_AMOUNT_DESC
  COLLATERAL_AMOUNT_ASC
  COLLATERAL_AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `LoanPosition` object types. All fields are combined with a logical ‘and.’
input LoanPositionFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `ownerId` field.
  ownerId: StringFilter

  # Filter by the object’s `collateralId` field.
  collateralId: StringFilter

  # Filter by the object’s `debitAmount` field.
  debitAmount: StringFilter

  # Filter by the object’s `collateralAmount` field.
  collateralAmount: StringFilter

  # Checks for all expressions in this list.
  and: [LoanPositionFilter!]

  # Checks for any expressions in this list.
  or: [LoanPositionFilter!]

  # Negates the expression.
  not: LoanPositionFilter
}

# A connection to a list of `TotalLoanPosition` values.
type TotalLoanPositionsConnection {
  # A list of `TotalLoanPosition` objects.
  nodes: [TotalLoanPosition]!

  # A list of edges which contains the `TotalLoanPosition` and cursor to aid in pagination.
  edges: [TotalLoanPositionsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `TotalLoanPosition` you could get from the connection.
  totalCount: Int!
}

type TotalLoanPosition implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  collateralId: String
  debitAmount: String
  collateralAmount: String

  # Reads a single `Token` that is related to this `TotalLoanPosition`.
  collateral: Token
}

# A `TotalLoanPosition` edge in the connection.
type TotalLoanPositionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `TotalLoanPosition` at the end of the edge.
  node: TotalLoanPosition
}

# Methods to use when ordering `TotalLoanPosition`.
enum TotalLoanPositionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLATERAL_ID_ASC
  COLLATERAL_ID_DESC
  DEBIT_AMOUNT_ASC
  DEBIT_AMOUNT_DESC
  COLLATERAL_AMOUNT_ASC
  COLLATERAL_AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `TotalLoanPosition` object types. All fields are combined with a logical ‘and.’
input TotalLoanPositionFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `collateralId` field.
  collateralId: StringFilter

  # Filter by the object’s `debitAmount` field.
  debitAmount: StringFilter

  # Filter by the object’s `collateralAmount` field.
  collateralAmount: StringFilter

  # Checks for all expressions in this list.
  and: [TotalLoanPositionFilter!]

  # Checks for any expressions in this list.
  or: [TotalLoanPositionFilter!]

  # Negates the expression.
  not: TotalLoanPositionFilter
}

# A connection to a list of `LoanParam` values.
type LoanParamsConnection {
  # A list of `LoanParam` objects.
  nodes: [LoanParam]!

  # A list of edges which contains the `LoanParam` and cursor to aid in pagination.
  edges: [LoanParamsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `LoanParam` you could get from the connection.
  totalCount: Int!
}

type LoanParam implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  collateralId: String
  debitExchangeRate: String
  startAtBlockNumber: BigFloat
  startAtBlockId: String
  maximumTotalDebitValue: String
  interestRatePerSec: String
  liquidationRatio: String
  liquidationPenalty: String
  requiredCollateralRatio: String
  globalInterestRatePerSec: String

  # Reads a single `Token` that is related to this `LoanParam`.
  collateral: Token

  # Reads a single `Block` that is related to this `LoanParam`.
  startAtBlock: Block
}

# A `LoanParam` edge in the connection.
type LoanParamsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `LoanParam` at the end of the edge.
  node: LoanParam
}

# Methods to use when ordering `LoanParam`.
enum LoanParamsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLATERAL_ID_ASC
  COLLATERAL_ID_DESC
  DEBIT_EXCHANGE_RATE_ASC
  DEBIT_EXCHANGE_RATE_DESC
  START_AT_BLOCK_NUMBER_ASC
  START_AT_BLOCK_NUMBER_DESC
  START_AT_BLOCK_ID_ASC
  START_AT_BLOCK_ID_DESC
  MAXIMUM_TOTAL_DEBIT_VALUE_ASC
  MAXIMUM_TOTAL_DEBIT_VALUE_DESC
  INTEREST_RATE_PER_SEC_ASC
  INTEREST_RATE_PER_SEC_DESC
  LIQUIDATION_RATIO_ASC
  LIQUIDATION_RATIO_DESC
  LIQUIDATION_PENALTY_ASC
  LIQUIDATION_PENALTY_DESC
  REQUIRED_COLLATERAL_RATIO_ASC
  REQUIRED_COLLATERAL_RATIO_DESC
  GLOBAL_INTEREST_RATE_PER_SEC_ASC
  GLOBAL_INTEREST_RATE_PER_SEC_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `LoanParam` object types. All fields are combined with a logical ‘and.’
input LoanParamFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `collateralId` field.
  collateralId: StringFilter

  # Filter by the object’s `debitExchangeRate` field.
  debitExchangeRate: StringFilter

  # Filter by the object’s `startAtBlockNumber` field.
  startAtBlockNumber: BigFloatFilter

  # Filter by the object’s `startAtBlockId` field.
  startAtBlockId: StringFilter

  # Filter by the object’s `maximumTotalDebitValue` field.
  maximumTotalDebitValue: StringFilter

  # Filter by the object’s `interestRatePerSec` field.
  interestRatePerSec: StringFilter

  # Filter by the object’s `liquidationRatio` field.
  liquidationRatio: StringFilter

  # Filter by the object’s `liquidationPenalty` field.
  liquidationPenalty: StringFilter

  # Filter by the object’s `requiredCollateralRatio` field.
  requiredCollateralRatio: StringFilter

  # Filter by the object’s `globalInterestRatePerSec` field.
  globalInterestRatePerSec: StringFilter

  # Checks for all expressions in this list.
  and: [LoanParamFilter!]

  # Checks for any expressions in this list.
  or: [LoanParamFilter!]

  # Negates the expression.
  not: LoanParamFilter
}

# A connection to a list of `LoanParamsHistory` values.
type LoanParamsHistoriesConnection {
  # A list of `LoanParamsHistory` objects.
  nodes: [LoanParamsHistory]!

  # A list of edges which contains the `LoanParamsHistory` and cursor to aid in pagination.
  edges: [LoanParamsHistoriesEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `LoanParamsHistory` you could get from the connection.
  totalCount: Int!
}

type LoanParamsHistory implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  collateralId: String
  startAtBlockNumber: BigFloat
  startAtBlockId: String
  endAtBlockNumber: BigFloat
  endAtBlockId: String
  maximumTotalDebitValue: String
  interestRatePerSec: String
  liquidationRatio: String
  liquidationPenalty: String
  requiredCollateralRatio: String
  globalInterestRatePerSec: String

  # Reads a single `Token` that is related to this `LoanParamsHistory`.
  collateral: Token

  # Reads a single `Block` that is related to this `LoanParamsHistory`.
  startAtBlock: Block

  # Reads a single `Block` that is related to this `LoanParamsHistory`.
  endAtBlock: Block
}

# A `LoanParamsHistory` edge in the connection.
type LoanParamsHistoriesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `LoanParamsHistory` at the end of the edge.
  node: LoanParamsHistory
}

# Methods to use when ordering `LoanParamsHistory`.
enum LoanParamsHistoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLATERAL_ID_ASC
  COLLATERAL_ID_DESC
  START_AT_BLOCK_NUMBER_ASC
  START_AT_BLOCK_NUMBER_DESC
  START_AT_BLOCK_ID_ASC
  START_AT_BLOCK_ID_DESC
  END_AT_BLOCK_NUMBER_ASC
  END_AT_BLOCK_NUMBER_DESC
  END_AT_BLOCK_ID_ASC
  END_AT_BLOCK_ID_DESC
  MAXIMUM_TOTAL_DEBIT_VALUE_ASC
  MAXIMUM_TOTAL_DEBIT_VALUE_DESC
  INTEREST_RATE_PER_SEC_ASC
  INTEREST_RATE_PER_SEC_DESC
  LIQUIDATION_RATIO_ASC
  LIQUIDATION_RATIO_DESC
  LIQUIDATION_PENALTY_ASC
  LIQUIDATION_PENALTY_DESC
  REQUIRED_COLLATERAL_RATIO_ASC
  REQUIRED_COLLATERAL_RATIO_DESC
  GLOBAL_INTEREST_RATE_PER_SEC_ASC
  GLOBAL_INTEREST_RATE_PER_SEC_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `LoanParamsHistory` object types. All fields are combined with a logical ‘and.’
input LoanParamsHistoryFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `collateralId` field.
  collateralId: StringFilter

  # Filter by the object’s `startAtBlockNumber` field.
  startAtBlockNumber: BigFloatFilter

  # Filter by the object’s `startAtBlockId` field.
  startAtBlockId: StringFilter

  # Filter by the object’s `endAtBlockNumber` field.
  endAtBlockNumber: BigFloatFilter

  # Filter by the object’s `endAtBlockId` field.
  endAtBlockId: StringFilter

  # Filter by the object’s `maximumTotalDebitValue` field.
  maximumTotalDebitValue: StringFilter

  # Filter by the object’s `interestRatePerSec` field.
  interestRatePerSec: StringFilter

  # Filter by the object’s `liquidationRatio` field.
  liquidationRatio: StringFilter

  # Filter by the object’s `liquidationPenalty` field.
  liquidationPenalty: StringFilter

  # Filter by the object’s `requiredCollateralRatio` field.
  requiredCollateralRatio: StringFilter

  # Filter by the object’s `globalInterestRatePerSec` field.
  globalInterestRatePerSec: StringFilter

  # Checks for all expressions in this list.
  and: [LoanParamsHistoryFilter!]

  # Checks for any expressions in this list.
  or: [LoanParamsHistoryFilter!]

  # Negates the expression.
  not: LoanParamsHistoryFilter
}

# A connection to a list of `ProvisionPool` values.
type ProvisionPoolsConnection {
  # A list of `ProvisionPool` objects.
  nodes: [ProvisionPool]!

  # A list of edges which contains the `ProvisionPool` and cursor to aid in pagination.
  edges: [ProvisionPoolsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ProvisionPool` you could get from the connection.
  totalCount: Int!
}

type ProvisionPool implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  poolTokenId: String
  token0Id: String
  token1Id: String
  token0Amount: String
  token1Amount: String
  initializeShare: String
  startAtBlockNumber: BigFloat
  startAtBlockId: String
  endAtBlockNumber: BigFloat
  endAtBlockId: String
  txCount: BigFloat

  # Reads a single `Token` that is related to this `ProvisionPool`.
  poolToken: Token

  # Reads a single `Token` that is related to this `ProvisionPool`.
  token0: Token

  # Reads a single `Token` that is related to this `ProvisionPool`.
  token1: Token

  # Reads a single `Block` that is related to this `ProvisionPool`.
  startAtBlock: Block

  # Reads a single `Block` that is related to this `ProvisionPool`.
  endAtBlock: Block

  # Reads and enables pagination through a set of `UserProvision`.
  records(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByUserProvisionPoolIdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): ProvisionPoolTokensByUserProvisionPoolIdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByUserProvisionPoolIdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): ProvisionPoolTokensByUserProvisionPoolIdAndToken1IdManyToManyConnection!
}

# A connection to a list of `UserProvision` values.
type UserProvisionsConnection {
  # A list of `UserProvision` objects.
  nodes: [UserProvision]!

  # A list of edges which contains the `UserProvision` and cursor to aid in pagination.
  edges: [UserProvisionsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `UserProvision` you could get from the connection.
  totalCount: Int!
}

type UserProvision implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  poolId: String
  token0Id: String
  token1Id: String
  token0Amount: String
  token1Amount: String

  # Reads a single `ProvisionPool` that is related to this `UserProvision`.
  pool: ProvisionPool

  # Reads a single `Token` that is related to this `UserProvision`.
  token0: Token

  # Reads a single `Token` that is related to this `UserProvision`.
  token1: Token
}

# A `UserProvision` edge in the connection.
type UserProvisionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `UserProvision` at the end of the edge.
  node: UserProvision
}

# Methods to use when ordering `UserProvision`.
enum UserProvisionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_ID_ASC
  POOL_ID_DESC
  TOKEN0_ID_ASC
  TOKEN0_ID_DESC
  TOKEN1_ID_ASC
  TOKEN1_ID_DESC
  TOKEN0_AMOUNT_ASC
  TOKEN0_AMOUNT_DESC
  TOKEN1_AMOUNT_ASC
  TOKEN1_AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `UserProvision` object types. All fields are combined with a logical ‘and.’
input UserProvisionFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `poolId` field.
  poolId: StringFilter

  # Filter by the object’s `token0Id` field.
  token0Id: StringFilter

  # Filter by the object’s `token1Id` field.
  token1Id: StringFilter

  # Filter by the object’s `token0Amount` field.
  token0Amount: StringFilter

  # Filter by the object’s `token1Amount` field.
  token1Amount: StringFilter

  # Checks for all expressions in this list.
  and: [UserProvisionFilter!]

  # Checks for any expressions in this list.
  or: [UserProvisionFilter!]

  # Negates the expression.
  not: UserProvisionFilter
}

# A connection to a list of `Token` values, with data from `UserProvision`.
type ProvisionPoolTokensByUserProvisionPoolIdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `UserProvision`, and the cursor to aid in pagination.
  edges: [ProvisionPoolTokensByUserProvisionPoolIdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `UserProvision`.
type ProvisionPoolTokensByUserProvisionPoolIdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `UserProvision`.
  userProvisionsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection!
}

# Methods to use when ordering `Token`.
enum TokensOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DECIMAL_ASC
  DECIMAL_DESC
  PRICE_ASC
  PRICE_DESC
  ISSUANCE_ASC
  ISSUANCE_DESC
  LOCKED_IN_LOAN_ASC
  LOCKED_IN_LOAN_DESC
  LOCKED_IN_DEX_ASC
  LOCKED_IN_DEX_DESC
  LOCKED_IN_INCENTIVE_ASC
  LOCKED_IN_INCENTIVE_DESC
  VOLUME_ASC
  VOLUME_DESC
  VOLUME_U_S_D_ASC
  VOLUME_U_S_D_DESC
  TX_COUNT_ASC
  TX_COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `Token` object types. All fields are combined with a logical ‘and.’
input TokenFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `name` field.
  name: StringFilter

  # Filter by the object’s `decimal` field.
  decimal: IntFilter

  # Filter by the object’s `price` field.
  price: StringFilter

  # Filter by the object’s `issuance` field.
  issuance: StringFilter

  # Filter by the object’s `lockedInLoan` field.
  lockedInLoan: StringFilter

  # Filter by the object’s `lockedInDex` field.
  lockedInDex: StringFilter

  # Filter by the object’s `lockedInIncentive` field.
  lockedInIncentive: StringFilter

  # Filter by the object’s `volume` field.
  volume: StringFilter

  # Filter by the object’s `volumeUSD` field.
  volumeUSD: StringFilter

  # Filter by the object’s `txCount` field.
  txCount: BigFloatFilter

  # Checks for all expressions in this list.
  and: [TokenFilter!]

  # Checks for any expressions in this list.
  or: [TokenFilter!]

  # Negates the expression.
  not: TokenFilter
}

# A filter to be used against Int fields. All fields are combined with a logical ‘and.’
input IntFilter {
  # Is null (if `true` is specified) or is not null (if `false` is specified).
  isNull: Boolean

  # Equal to the specified value.
  equalTo: Int

  # Not equal to the specified value.
  notEqualTo: Int

  # Not equal to the specified value, treating null like an ordinary value.
  distinctFrom: Int

  # Equal to the specified value, treating null like an ordinary value.
  notDistinctFrom: Int

  # Included in the specified list.
  in: [Int!]

  # Not included in the specified list.
  notIn: [Int!]

  # Less than the specified value.
  lessThan: Int

  # Less than or equal to the specified value.
  lessThanOrEqualTo: Int

  # Greater than the specified value.
  greaterThan: Int

  # Greater than or equal to the specified value.
  greaterThanOrEqualTo: Int
}

# A connection to a list of `Token` values, with data from `UserProvision`.
type ProvisionPoolTokensByUserProvisionPoolIdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `UserProvision`, and the cursor to aid in pagination.
  edges: [ProvisionPoolTokensByUserProvisionPoolIdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `UserProvision`.
type ProvisionPoolTokensByUserProvisionPoolIdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `UserProvision`.
  userProvisionsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection!
}

# A `ProvisionPool` edge in the connection.
type ProvisionPoolsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ProvisionPool` at the end of the edge.
  node: ProvisionPool
}

# Methods to use when ordering `ProvisionPool`.
enum ProvisionPoolsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_TOKEN_ID_ASC
  POOL_TOKEN_ID_DESC
  TOKEN0_ID_ASC
  TOKEN0_ID_DESC
  TOKEN1_ID_ASC
  TOKEN1_ID_DESC
  TOKEN0_AMOUNT_ASC
  TOKEN0_AMOUNT_DESC
  TOKEN1_AMOUNT_ASC
  TOKEN1_AMOUNT_DESC
  INITIALIZE_SHARE_ASC
  INITIALIZE_SHARE_DESC
  START_AT_BLOCK_NUMBER_ASC
  START_AT_BLOCK_NUMBER_DESC
  START_AT_BLOCK_ID_ASC
  START_AT_BLOCK_ID_DESC
  END_AT_BLOCK_NUMBER_ASC
  END_AT_BLOCK_NUMBER_DESC
  END_AT_BLOCK_ID_ASC
  END_AT_BLOCK_ID_DESC
  TX_COUNT_ASC
  TX_COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `ProvisionPool` object types. All fields are combined with a logical ‘and.’
input ProvisionPoolFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `poolTokenId` field.
  poolTokenId: StringFilter

  # Filter by the object’s `token0Id` field.
  token0Id: StringFilter

  # Filter by the object’s `token1Id` field.
  token1Id: StringFilter

  # Filter by the object’s `token0Amount` field.
  token0Amount: StringFilter

  # Filter by the object’s `token1Amount` field.
  token1Amount: StringFilter

  # Filter by the object’s `initializeShare` field.
  initializeShare: StringFilter

  # Filter by the object’s `startAtBlockNumber` field.
  startAtBlockNumber: BigFloatFilter

  # Filter by the object’s `startAtBlockId` field.
  startAtBlockId: StringFilter

  # Filter by the object’s `endAtBlockNumber` field.
  endAtBlockNumber: BigFloatFilter

  # Filter by the object’s `endAtBlockId` field.
  endAtBlockId: StringFilter

  # Filter by the object’s `txCount` field.
  txCount: BigFloatFilter

  # Checks for all expressions in this list.
  and: [ProvisionPoolFilter!]

  # Checks for any expressions in this list.
  or: [ProvisionPoolFilter!]

  # Negates the expression.
  not: ProvisionPoolFilter
}

# A connection to a list of `Pool` values.
type PoolsConnection {
  # A list of `Pool` objects.
  nodes: [Pool]!

  # A list of edges which contains the `Pool` and cursor to aid in pagination.
  edges: [PoolsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Pool` you could get from the connection.
  totalCount: Int!
}

type Pool implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  token0Id: String
  token1Id: String
  token0Amount: String
  token1Amount: String
  exchange0: String
  exchange1: String
  fee: String
  token0Volume: String
  token1Volume: String
  volumeUSD: String
  token0TVL: String
  token1TVL: String
  tvlUSD: String
  txCount: BigFloat

  # Reads a single `Token` that is related to this `Pool`.
  token0: Token

  # Reads a single `Token` that is related to this `Pool`.
  token1: Token

  # Reads and enables pagination through a set of `PoolHourDatum`.
  hourData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection!

  # Reads and enables pagination through a set of `PoolDayDatum`.
  dayData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection!

  # Reads and enables pagination through a set of `DexAction`.
  actions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolHourDatumPoolIdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): PoolTokensByPoolHourDatumPoolIdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolHourDatumPoolIdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): PoolTokensByPoolHourDatumPoolIdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolDayDatumPoolIdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): PoolTokensByPoolDayDatumPoolIdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByPoolDayDatumPoolIdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): PoolTokensByPoolDayDatumPoolIdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Account`.
  accountsByDexActionPoolIdAndAccountId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Account`.
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: AccountFilter
  ): PoolAccountsByDexActionPoolIdAndAccountIdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByDexActionPoolIdAndToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): PoolTokensByDexActionPoolIdAndToken0IdManyToManyConnection!

  # Reads and enables pagination through a set of `Token`.
  tokensByDexActionPoolIdAndToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Token`.
    orderBy: [TokensOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TokenFilter
  ): PoolTokensByDexActionPoolIdAndToken1IdManyToManyConnection!

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsicsByDexActionPoolIdAndExtrinsicId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): PoolExtrinsicsByDexActionPoolIdAndExtrinsicIdManyToManyConnection!
}

# A connection to a list of `PoolHourDatum` values.
type PoolHourDataConnection {
  # A list of `PoolHourDatum` objects.
  nodes: [PoolHourDatum]!

  # A list of edges which contains the `PoolHourDatum` and cursor to aid in pagination.
  edges: [PoolHourDataEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `PoolHourDatum` you could get from the connection.
  totalCount: Int!
}

type PoolHourDatum implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  poolId: String
  date: Datetime
  token0Id: String
  token1Id: String
  token0Amount: String
  token1Amount: String
  exchange0: String
  exchange1: String
  volumeToken0: String
  volumeToken1: String
  volumeUSD: String
  txCount: BigFloat
  tvlUSD: String
  token0Open: String
  token0High: String
  token0Low: String
  token0Close: String

  # Reads a single `Pool` that is related to this `PoolHourDatum`.
  pool: Pool

  # Reads a single `Token` that is related to this `PoolHourDatum`.
  token0: Token

  # Reads a single `Token` that is related to this `PoolHourDatum`.
  token1: Token
}

# A `PoolHourDatum` edge in the connection.
type PoolHourDataEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `PoolHourDatum` at the end of the edge.
  node: PoolHourDatum
}

# Methods to use when ordering `PoolHourDatum`.
enum PoolHourDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_ID_ASC
  POOL_ID_DESC
  DATE_ASC
  DATE_DESC
  TOKEN0_ID_ASC
  TOKEN0_ID_DESC
  TOKEN1_ID_ASC
  TOKEN1_ID_DESC
  TOKEN0_AMOUNT_ASC
  TOKEN0_AMOUNT_DESC
  TOKEN1_AMOUNT_ASC
  TOKEN1_AMOUNT_DESC
  EXCHANGE0_ASC
  EXCHANGE0_DESC
  EXCHANGE1_ASC
  EXCHANGE1_DESC
  VOLUME_TOKEN0_ASC
  VOLUME_TOKEN0_DESC
  VOLUME_TOKEN1_ASC
  VOLUME_TOKEN1_DESC
  VOLUME_U_S_D_ASC
  VOLUME_U_S_D_DESC
  TX_COUNT_ASC
  TX_COUNT_DESC
  TVL_U_S_D_ASC
  TVL_U_S_D_DESC
  TOKEN0_OPEN_ASC
  TOKEN0_OPEN_DESC
  TOKEN0_HIGH_ASC
  TOKEN0_HIGH_DESC
  TOKEN0_LOW_ASC
  TOKEN0_LOW_DESC
  TOKEN0_CLOSE_ASC
  TOKEN0_CLOSE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `PoolHourDatum` object types. All fields are combined with a logical ‘and.’
input PoolHourDatumFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `poolId` field.
  poolId: StringFilter

  # Filter by the object’s `date` field.
  date: DatetimeFilter

  # Filter by the object’s `token0Id` field.
  token0Id: StringFilter

  # Filter by the object’s `token1Id` field.
  token1Id: StringFilter

  # Filter by the object’s `token0Amount` field.
  token0Amount: StringFilter

  # Filter by the object’s `token1Amount` field.
  token1Amount: StringFilter

  # Filter by the object’s `exchange0` field.
  exchange0: StringFilter

  # Filter by the object’s `exchange1` field.
  exchange1: StringFilter

  # Filter by the object’s `volumeToken0` field.
  volumeToken0: StringFilter

  # Filter by the object’s `volumeToken1` field.
  volumeToken1: StringFilter

  # Filter by the object’s `volumeUSD` field.
  volumeUSD: StringFilter

  # Filter by the object’s `txCount` field.
  txCount: BigFloatFilter

  # Filter by the object’s `tvlUSD` field.
  tvlUSD: StringFilter

  # Filter by the object’s `token0Open` field.
  token0Open: StringFilter

  # Filter by the object’s `token0High` field.
  token0High: StringFilter

  # Filter by the object’s `token0Low` field.
  token0Low: StringFilter

  # Filter by the object’s `token0Close` field.
  token0Close: StringFilter

  # Checks for all expressions in this list.
  and: [PoolHourDatumFilter!]

  # Checks for any expressions in this list.
  or: [PoolHourDatumFilter!]

  # Negates the expression.
  not: PoolHourDatumFilter
}

# A connection to a list of `PoolDayDatum` values.
type PoolDayDataConnection {
  # A list of `PoolDayDatum` objects.
  nodes: [PoolDayDatum]!

  # A list of edges which contains the `PoolDayDatum` and cursor to aid in pagination.
  edges: [PoolDayDataEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `PoolDayDatum` you could get from the connection.
  totalCount: Int!
}

type PoolDayDatum implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  poolId: String
  token0Id: String!
  token1Id: String!
  date: Datetime
  token0Amount: String
  token1Amount: String
  exchange0: String
  exchange1: String
  volumeToken0: String
  volumeToken1: String
  volumeUSD: String
  txCount: BigFloat
  tvlUSD: String
  token0Open: String
  token0High: String
  token0Low: String
  token0Close: String

  # Reads a single `Pool` that is related to this `PoolDayDatum`.
  pool: Pool

  # Reads a single `Token` that is related to this `PoolDayDatum`.
  token0: Token

  # Reads a single `Token` that is related to this `PoolDayDatum`.
  token1: Token
}

# A `PoolDayDatum` edge in the connection.
type PoolDayDataEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `PoolDayDatum` at the end of the edge.
  node: PoolDayDatum
}

# Methods to use when ordering `PoolDayDatum`.
enum PoolDayDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_ID_ASC
  POOL_ID_DESC
  TOKEN0_ID_ASC
  TOKEN0_ID_DESC
  TOKEN1_ID_ASC
  TOKEN1_ID_DESC
  DATE_ASC
  DATE_DESC
  TOKEN0_AMOUNT_ASC
  TOKEN0_AMOUNT_DESC
  TOKEN1_AMOUNT_ASC
  TOKEN1_AMOUNT_DESC
  EXCHANGE0_ASC
  EXCHANGE0_DESC
  EXCHANGE1_ASC
  EXCHANGE1_DESC
  VOLUME_TOKEN0_ASC
  VOLUME_TOKEN0_DESC
  VOLUME_TOKEN1_ASC
  VOLUME_TOKEN1_DESC
  VOLUME_U_S_D_ASC
  VOLUME_U_S_D_DESC
  TX_COUNT_ASC
  TX_COUNT_DESC
  TVL_U_S_D_ASC
  TVL_U_S_D_DESC
  TOKEN0_OPEN_ASC
  TOKEN0_OPEN_DESC
  TOKEN0_HIGH_ASC
  TOKEN0_HIGH_DESC
  TOKEN0_LOW_ASC
  TOKEN0_LOW_DESC
  TOKEN0_CLOSE_ASC
  TOKEN0_CLOSE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `PoolDayDatum` object types. All fields are combined with a logical ‘and.’
input PoolDayDatumFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `poolId` field.
  poolId: StringFilter

  # Filter by the object’s `token0Id` field.
  token0Id: StringFilter

  # Filter by the object’s `token1Id` field.
  token1Id: StringFilter

  # Filter by the object’s `date` field.
  date: DatetimeFilter

  # Filter by the object’s `token0Amount` field.
  token0Amount: StringFilter

  # Filter by the object’s `token1Amount` field.
  token1Amount: StringFilter

  # Filter by the object’s `exchange0` field.
  exchange0: StringFilter

  # Filter by the object’s `exchange1` field.
  exchange1: StringFilter

  # Filter by the object’s `volumeToken0` field.
  volumeToken0: StringFilter

  # Filter by the object’s `volumeToken1` field.
  volumeToken1: StringFilter

  # Filter by the object’s `volumeUSD` field.
  volumeUSD: StringFilter

  # Filter by the object’s `txCount` field.
  txCount: BigFloatFilter

  # Filter by the object’s `tvlUSD` field.
  tvlUSD: StringFilter

  # Filter by the object’s `token0Open` field.
  token0Open: StringFilter

  # Filter by the object’s `token0High` field.
  token0High: StringFilter

  # Filter by the object’s `token0Low` field.
  token0Low: StringFilter

  # Filter by the object’s `token0Close` field.
  token0Close: StringFilter

  # Checks for all expressions in this list.
  and: [PoolDayDatumFilter!]

  # Checks for any expressions in this list.
  or: [PoolDayDatumFilter!]

  # Negates the expression.
  not: PoolDayDatumFilter
}

# A connection to a list of `DexAction` values.
type DexActionsConnection {
  # A list of `DexAction` objects.
  nodes: [DexAction]!

  # A list of edges which contains the `DexAction` and cursor to aid in pagination.
  edges: [DexActionsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `DexAction` you could get from the connection.
  totalCount: Int!
}

type DexAction implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  accountId: String
  type: String
  subType: String
  data: JSON
  poolId: String
  token0Id: String
  token1Id: String
  token0Amount: String
  token1Amount: String
  volumeUSD: String
  extrinsicId: String
  timestamp: Datetime

  # Reads a single `Account` that is related to this `DexAction`.
  account: Account

  # Reads a single `Pool` that is related to this `DexAction`.
  pool: Pool

  # Reads a single `Token` that is related to this `DexAction`.
  token0: Token

  # Reads a single `Token` that is related to this `DexAction`.
  token1: Token

  # Reads a single `Extrinsic` that is related to this `DexAction`.
  extrinsic: Extrinsic
}

# A `DexAction` edge in the connection.
type DexActionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `DexAction` at the end of the edge.
  node: DexAction
}

# Methods to use when ordering `DexAction`.
enum DexActionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  TYPE_ASC
  TYPE_DESC
  SUB_TYPE_ASC
  SUB_TYPE_DESC
  DATA_ASC
  DATA_DESC
  POOL_ID_ASC
  POOL_ID_DESC
  TOKEN0_ID_ASC
  TOKEN0_ID_DESC
  TOKEN1_ID_ASC
  TOKEN1_ID_DESC
  TOKEN0_AMOUNT_ASC
  TOKEN0_AMOUNT_DESC
  TOKEN1_AMOUNT_ASC
  TOKEN1_AMOUNT_DESC
  VOLUME_U_S_D_ASC
  VOLUME_U_S_D_DESC
  EXTRINSIC_ID_ASC
  EXTRINSIC_ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `DexAction` object types. All fields are combined with a logical ‘and.’
input DexActionFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `accountId` field.
  accountId: StringFilter

  # Filter by the object’s `type` field.
  type: StringFilter

  # Filter by the object’s `subType` field.
  subType: StringFilter

  # Filter by the object’s `data` field.
  data: JSONFilter

  # Filter by the object’s `poolId` field.
  poolId: StringFilter

  # Filter by the object’s `token0Id` field.
  token0Id: StringFilter

  # Filter by the object’s `token1Id` field.
  token1Id: StringFilter

  # Filter by the object’s `token0Amount` field.
  token0Amount: StringFilter

  # Filter by the object’s `token1Amount` field.
  token1Amount: StringFilter

  # Filter by the object’s `volumeUSD` field.
  volumeUSD: StringFilter

  # Filter by the object’s `extrinsicId` field.
  extrinsicId: StringFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Checks for all expressions in this list.
  and: [DexActionFilter!]

  # Checks for any expressions in this list.
  or: [DexActionFilter!]

  # Negates the expression.
  not: DexActionFilter
}

# A connection to a list of `Token` values, with data from `PoolHourDatum`.
type PoolTokensByPoolHourDatumPoolIdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `PoolHourDatum`, and the cursor to aid in pagination.
  edges: [PoolTokensByPoolHourDatumPoolIdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `PoolHourDatum`.
type PoolTokensByPoolHourDatumPoolIdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `PoolHourDatum`.
  poolHourDataByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection!
}

# A connection to a list of `Token` values, with data from `PoolHourDatum`.
type PoolTokensByPoolHourDatumPoolIdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `PoolHourDatum`, and the cursor to aid in pagination.
  edges: [PoolTokensByPoolHourDatumPoolIdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `PoolHourDatum`.
type PoolTokensByPoolHourDatumPoolIdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `PoolHourDatum`.
  poolHourDataByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection!
}

# A connection to a list of `Token` values, with data from `PoolDayDatum`.
type PoolTokensByPoolDayDatumPoolIdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `PoolDayDatum`, and the cursor to aid in pagination.
  edges: [PoolTokensByPoolDayDatumPoolIdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `PoolDayDatum`.
type PoolTokensByPoolDayDatumPoolIdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `PoolDayDatum`.
  poolDayDataBase(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection!
}

# A connection to a list of `Token` values, with data from `PoolDayDatum`.
type PoolTokensByPoolDayDatumPoolIdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `PoolDayDatum`, and the cursor to aid in pagination.
  edges: [PoolTokensByPoolDayDatumPoolIdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `PoolDayDatum`.
type PoolTokensByPoolDayDatumPoolIdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `PoolDayDatum`.
  poolDayDataQuote(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection!
}

# A connection to a list of `Account` values, with data from `DexAction`.
type PoolAccountsByDexActionPoolIdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [PoolAccountsByDexActionPoolIdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `DexAction`.
type PoolAccountsByDexActionPoolIdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Token` values, with data from `DexAction`.
type PoolTokensByDexActionPoolIdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [PoolTokensByDexActionPoolIdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `DexAction`.
type PoolTokensByDexActionPoolIdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Token` values, with data from `DexAction`.
type PoolTokensByDexActionPoolIdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [PoolTokensByDexActionPoolIdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `DexAction`.
type PoolTokensByDexActionPoolIdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `DexAction`.
type PoolExtrinsicsByDexActionPoolIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [PoolExtrinsicsByDexActionPoolIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `DexAction`.
type PoolExtrinsicsByDexActionPoolIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# Methods to use when ordering `Extrinsic`.
enum ExtrinsicsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  METHOD_ASC
  METHOD_DESC
  SECTION_ASC
  SECTION_DESC
  ARGS_ASC
  ARGS_DESC
  SIGNER_ID_ASC
  SIGNER_ID_DESC
  NONCE_ASC
  NONCE_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  SIGNATURE_ASC
  SIGNATURE_DESC
  TIP_ASC
  TIP_DESC
  IS_SIGNED_ASC
  IS_SIGNED_DESC
  IS_SUCCESS_ASC
  IS_SUCCESS_DESC
  BLOCK_ID_ASC
  BLOCK_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `Extrinsic` object types. All fields are combined with a logical ‘and.’
input ExtrinsicFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `method` field.
  method: StringFilter

  # Filter by the object’s `section` field.
  section: StringFilter

  # Filter by the object’s `args` field.
  args: JSONFilter

  # Filter by the object’s `signerId` field.
  signerId: StringFilter

  # Filter by the object’s `nonce` field.
  nonce: BigFloatFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Filter by the object’s `signature` field.
  signature: StringFilter

  # Filter by the object’s `tip` field.
  tip: StringFilter

  # Filter by the object’s `isSigned` field.
  isSigned: BooleanFilter

  # Filter by the object’s `isSuccess` field.
  isSuccess: BooleanFilter

  # Filter by the object’s `blockId` field.
  blockId: StringFilter

  # Checks for all expressions in this list.
  and: [ExtrinsicFilter!]

  # Checks for any expressions in this list.
  or: [ExtrinsicFilter!]

  # Negates the expression.
  not: ExtrinsicFilter
}

# A `Pool` edge in the connection.
type PoolsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Pool` at the end of the edge.
  node: Pool
}

# Methods to use when ordering `Pool`.
enum PoolsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TOKEN0_ID_ASC
  TOKEN0_ID_DESC
  TOKEN1_ID_ASC
  TOKEN1_ID_DESC
  TOKEN0_AMOUNT_ASC
  TOKEN0_AMOUNT_DESC
  TOKEN1_AMOUNT_ASC
  TOKEN1_AMOUNT_DESC
  EXCHANGE0_ASC
  EXCHANGE0_DESC
  EXCHANGE1_ASC
  EXCHANGE1_DESC
  FEE_ASC
  FEE_DESC
  TOKEN0_VOLUME_ASC
  TOKEN0_VOLUME_DESC
  TOKEN1_VOLUME_ASC
  TOKEN1_VOLUME_DESC
  VOLUME_U_S_D_ASC
  VOLUME_U_S_D_DESC
  TOKEN0_T_V_L_ASC
  TOKEN0_T_V_L_DESC
  TOKEN1_T_V_L_ASC
  TOKEN1_T_V_L_DESC
  TVL_U_S_D_ASC
  TVL_U_S_D_DESC
  TX_COUNT_ASC
  TX_COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `Pool` object types. All fields are combined with a logical ‘and.’
input PoolFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `token0Id` field.
  token0Id: StringFilter

  # Filter by the object’s `token1Id` field.
  token1Id: StringFilter

  # Filter by the object’s `token0Amount` field.
  token0Amount: StringFilter

  # Filter by the object’s `token1Amount` field.
  token1Amount: StringFilter

  # Filter by the object’s `exchange0` field.
  exchange0: StringFilter

  # Filter by the object’s `exchange1` field.
  exchange1: StringFilter

  # Filter by the object’s `fee` field.
  fee: StringFilter

  # Filter by the object’s `token0Volume` field.
  token0Volume: StringFilter

  # Filter by the object’s `token1Volume` field.
  token1Volume: StringFilter

  # Filter by the object’s `volumeUSD` field.
  volumeUSD: StringFilter

  # Filter by the object’s `token0TVL` field.
  token0TVL: StringFilter

  # Filter by the object’s `token1TVL` field.
  token1TVL: StringFilter

  # Filter by the object’s `tvlUSD` field.
  tvlUSD: StringFilter

  # Filter by the object’s `txCount` field.
  txCount: BigFloatFilter

  # Checks for all expressions in this list.
  and: [PoolFilter!]

  # Checks for any expressions in this list.
  or: [PoolFilter!]

  # Negates the expression.
  not: PoolFilter
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstLiquidTokenIdAndStakignTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstLiquidTokenIdAndStakignTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstLiquidTokenIdAndStakignTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByStakignTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstLiquidTokenIdAndNativeTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstLiquidTokenIdAndNativeTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstLiquidTokenIdAndNativeTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByNativeTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstLiquidTokenIdAndStableTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstLiquidTokenIdAndStableTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstLiquidTokenIdAndStableTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByStableTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstStakignTokenIdAndLiquidTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstStakignTokenIdAndLiquidTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstStakignTokenIdAndLiquidTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByLiquidTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstStakignTokenIdAndNativeTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstStakignTokenIdAndNativeTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstStakignTokenIdAndNativeTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByNativeTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstStakignTokenIdAndStableTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstStakignTokenIdAndStableTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstStakignTokenIdAndStableTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByStableTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstNativeTokenIdAndLiquidTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstNativeTokenIdAndLiquidTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstNativeTokenIdAndLiquidTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByLiquidTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstNativeTokenIdAndStakignTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstNativeTokenIdAndStakignTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstNativeTokenIdAndStakignTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByStakignTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstNativeTokenIdAndStableTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstNativeTokenIdAndStableTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstNativeTokenIdAndStableTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByStableTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstStableTokenIdAndLiquidTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstStableTokenIdAndLiquidTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstStableTokenIdAndLiquidTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByLiquidTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstStableTokenIdAndStakignTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstStableTokenIdAndStakignTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstStableTokenIdAndStakignTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByStakignTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Token` values, with data from `SystemConst`.
type TokenTokensBySystemConstStableTokenIdAndNativeTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `SystemConst`, and the cursor to aid in pagination.
  edges: [TokenTokensBySystemConstStableTokenIdAndNativeTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `SystemConst`.
type TokenTokensBySystemConstStableTokenIdAndNativeTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `SystemConst`.
  systemConstsByNativeTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `SystemConst`.
    orderBy: [SystemConstsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: SystemConstFilter
  ): SystemConstsConnection!
}

# A connection to a list of `Account` values, with data from `Transfer`.
type TokenAccountsByTransferTokenIdAndFromIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [TokenAccountsByTransferTokenIdAndFromIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Transfer`.
type TokenAccountsByTransferTokenIdAndFromIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Transfer`.
  transferOut(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Account` values, with data from `Transfer`.
type TokenAccountsByTransferTokenIdAndToIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [TokenAccountsByTransferTokenIdAndToIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Transfer`.
type TokenAccountsByTransferTokenIdAndToIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Transfer`.
  transferIn(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Extrinsic` values, with data from `Transfer`.
type TokenExtrinsicsByTransferTokenIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [TokenExtrinsicsByTransferTokenIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `Transfer`.
type TokenExtrinsicsByTransferTokenIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Call` values, with data from `Transfer`.
type TokenCallsByTransferTokenIdAndCallIdManyToManyConnection {
  # A list of `Call` objects.
  nodes: [Call]!

  # A list of edges which contains the `Call`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [TokenCallsByTransferTokenIdAndCallIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Call` you could get from the connection.
  totalCount: Int!
}

# A `Call` edge in the connection, with data from `Transfer`.
type TokenCallsByTransferTokenIdAndCallIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Call` at the end of the edge.
  node: Call

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Account` values, with data from `OracleFeedRecord`.
type TokenAccountsByOracleFeedRecordTokenIdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `OracleFeedRecord`, and the cursor to aid in pagination.
  edges: [TokenAccountsByOracleFeedRecordTokenIdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `OracleFeedRecord`.
type TokenAccountsByOracleFeedRecordTokenIdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection!
}

# A connection to a list of `Block` values, with data from `OracleFeedRecord`.
type TokenBlocksByOracleFeedRecordTokenIdAndBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `OracleFeedRecord`, and the cursor to aid in pagination.
  edges: [TokenBlocksByOracleFeedRecordTokenIdAndBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `OracleFeedRecord`.
type TokenBlocksByOracleFeedRecordTokenIdAndBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection!
}

# Methods to use when ordering `Block`.
enum BlocksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NUMBER_ASC
  NUMBER_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PARENT_HASH_ASC
  PARENT_HASH_DESC
  SPEC_VERSION_ASC
  SPEC_VERSION_DESC
  STATE_ROOT_ASC
  STATE_ROOT_DESC
  EXTRINSIC_ROOT_ASC
  EXTRINSIC_ROOT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `Block` object types. All fields are combined with a logical ‘and.’
input BlockFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `number` field.
  number: BigFloatFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Filter by the object’s `parentHash` field.
  parentHash: StringFilter

  # Filter by the object’s `specVersion` field.
  specVersion: StringFilter

  # Filter by the object’s `stateRoot` field.
  stateRoot: StringFilter

  # Filter by the object’s `extrinsicRoot` field.
  extrinsicRoot: StringFilter

  # Checks for all expressions in this list.
  and: [BlockFilter!]

  # Checks for any expressions in this list.
  or: [BlockFilter!]

  # Negates the expression.
  not: BlockFilter
}

# A connection to a list of `Account` values, with data from `LoanPosition`.
type TokenAccountsByLoanPositionCollateralIdAndOwnerIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `LoanPosition`, and the cursor to aid in pagination.
  edges: [TokenAccountsByLoanPositionCollateralIdAndOwnerIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `LoanPosition`.
type TokenAccountsByLoanPositionCollateralIdAndOwnerIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `LoanPosition`.
  position(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanPosition`.
    orderBy: [LoanPositionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanPositionFilter
  ): LoanPositionsConnection!
}

# A connection to a list of `Block` values, with data from `LoanParam`.
type TokenBlocksByLoanParamCollateralIdAndStartAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `LoanParam`, and the cursor to aid in pagination.
  edges: [TokenBlocksByLoanParamCollateralIdAndStartAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `LoanParam`.
type TokenBlocksByLoanParamCollateralIdAndStartAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `LoanParam`.
  loanParamsByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParam`.
    orderBy: [LoanParamsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamFilter
  ): LoanParamsConnection!
}

# A connection to a list of `Block` values, with data from `LoanParamsHistory`.
type TokenBlocksByLoanParamsHistoryCollateralIdAndStartAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `LoanParamsHistory`, and the cursor to aid in pagination.
  edges: [TokenBlocksByLoanParamsHistoryCollateralIdAndStartAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `LoanParamsHistory`.
type TokenBlocksByLoanParamsHistoryCollateralIdAndStartAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistoriesByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection!
}

# A connection to a list of `Block` values, with data from `LoanParamsHistory`.
type TokenBlocksByLoanParamsHistoryCollateralIdAndEndAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `LoanParamsHistory`, and the cursor to aid in pagination.
  edges: [TokenBlocksByLoanParamsHistoryCollateralIdAndEndAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `LoanParamsHistory`.
type TokenBlocksByLoanParamsHistoryCollateralIdAndEndAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistoriesByEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolPoolTokenIdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenTokensByProvisionPoolPoolTokenIdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolPoolTokenIdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolPoolTokenIdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenTokensByProvisionPoolPoolTokenIdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolPoolTokenIdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Block` values, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolPoolTokenIdAndStartAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenBlocksByProvisionPoolPoolTokenIdAndStartAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolPoolTokenIdAndStartAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Block` values, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolPoolTokenIdAndEndAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenBlocksByProvisionPoolPoolTokenIdAndEndAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolPoolTokenIdAndEndAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolToken0IdAndPoolTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenTokensByProvisionPoolToken0IdAndPoolTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolToken0IdAndPoolTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByPoolTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolToken0IdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenTokensByProvisionPoolToken0IdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolToken0IdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Block` values, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolToken0IdAndStartAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenBlocksByProvisionPoolToken0IdAndStartAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolToken0IdAndStartAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Block` values, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolToken0IdAndEndAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenBlocksByProvisionPoolToken0IdAndEndAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolToken0IdAndEndAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolToken1IdAndPoolTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenTokensByProvisionPoolToken1IdAndPoolTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolToken1IdAndPoolTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByPoolTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolToken1IdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenTokensByProvisionPoolToken1IdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type TokenTokensByProvisionPoolToken1IdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Block` values, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolToken1IdAndStartAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenBlocksByProvisionPoolToken1IdAndStartAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolToken1IdAndStartAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Block` values, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolToken1IdAndEndAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [TokenBlocksByProvisionPoolToken1IdAndEndAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `ProvisionPool`.
type TokenBlocksByProvisionPoolToken1IdAndEndAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `ProvisionPool` values, with data from `UserProvision`.
type TokenProvisionPoolsByUserProvisionToken0IdAndPoolIdManyToManyConnection {
  # A list of `ProvisionPool` objects.
  nodes: [ProvisionPool]!

  # A list of edges which contains the `ProvisionPool`, info from the `UserProvision`, and the cursor to aid in pagination.
  edges: [TokenProvisionPoolsByUserProvisionToken0IdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ProvisionPool` you could get from the connection.
  totalCount: Int!
}

# A `ProvisionPool` edge in the connection, with data from `UserProvision`.
type TokenProvisionPoolsByUserProvisionToken0IdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ProvisionPool` at the end of the edge.
  node: ProvisionPool

  # Reads and enables pagination through a set of `UserProvision`.
  records(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection!
}

# A connection to a list of `Token` values, with data from `UserProvision`.
type TokenTokensByUserProvisionToken0IdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `UserProvision`, and the cursor to aid in pagination.
  edges: [TokenTokensByUserProvisionToken0IdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `UserProvision`.
type TokenTokensByUserProvisionToken0IdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `UserProvision`.
  userProvisionsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection!
}

# A connection to a list of `ProvisionPool` values, with data from `UserProvision`.
type TokenProvisionPoolsByUserProvisionToken1IdAndPoolIdManyToManyConnection {
  # A list of `ProvisionPool` objects.
  nodes: [ProvisionPool]!

  # A list of edges which contains the `ProvisionPool`, info from the `UserProvision`, and the cursor to aid in pagination.
  edges: [TokenProvisionPoolsByUserProvisionToken1IdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `ProvisionPool` you could get from the connection.
  totalCount: Int!
}

# A `ProvisionPool` edge in the connection, with data from `UserProvision`.
type TokenProvisionPoolsByUserProvisionToken1IdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `ProvisionPool` at the end of the edge.
  node: ProvisionPool

  # Reads and enables pagination through a set of `UserProvision`.
  records(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection!
}

# A connection to a list of `Token` values, with data from `UserProvision`.
type TokenTokensByUserProvisionToken1IdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `UserProvision`, and the cursor to aid in pagination.
  edges: [TokenTokensByUserProvisionToken1IdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `UserProvision`.
type TokenTokensByUserProvisionToken1IdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `UserProvision`.
  userProvisionsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `UserProvision`.
    orderBy: [UserProvisionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: UserProvisionFilter
  ): UserProvisionsConnection!
}

# A connection to a list of `Token` values, with data from `Pool`.
type TokenTokensByPoolToken0IdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `Pool`, and the cursor to aid in pagination.
  edges: [TokenTokensByPoolToken0IdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `Pool`.
type TokenTokensByPoolToken0IdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `Pool`.
  poolQuote(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): PoolsConnection!
}

# A connection to a list of `Token` values, with data from `Pool`.
type TokenTokensByPoolToken1IdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `Pool`, and the cursor to aid in pagination.
  edges: [TokenTokensByPoolToken1IdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `Pool`.
type TokenTokensByPoolToken1IdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `Pool`.
  poolBase(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Pool`.
    orderBy: [PoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolFilter
  ): PoolsConnection!
}

# A connection to a list of `Pool` values, with data from `PoolHourDatum`.
type TokenPoolsByPoolHourDatumToken0IdAndPoolIdManyToManyConnection {
  # A list of `Pool` objects.
  nodes: [Pool]!

  # A list of edges which contains the `Pool`, info from the `PoolHourDatum`, and the cursor to aid in pagination.
  edges: [TokenPoolsByPoolHourDatumToken0IdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Pool` you could get from the connection.
  totalCount: Int!
}

# A `Pool` edge in the connection, with data from `PoolHourDatum`.
type TokenPoolsByPoolHourDatumToken0IdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Pool` at the end of the edge.
  node: Pool

  # Reads and enables pagination through a set of `PoolHourDatum`.
  hourData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection!
}

# A connection to a list of `Token` values, with data from `PoolHourDatum`.
type TokenTokensByPoolHourDatumToken0IdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `PoolHourDatum`, and the cursor to aid in pagination.
  edges: [TokenTokensByPoolHourDatumToken0IdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `PoolHourDatum`.
type TokenTokensByPoolHourDatumToken0IdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `PoolHourDatum`.
  poolHourDataByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection!
}

# A connection to a list of `Pool` values, with data from `PoolHourDatum`.
type TokenPoolsByPoolHourDatumToken1IdAndPoolIdManyToManyConnection {
  # A list of `Pool` objects.
  nodes: [Pool]!

  # A list of edges which contains the `Pool`, info from the `PoolHourDatum`, and the cursor to aid in pagination.
  edges: [TokenPoolsByPoolHourDatumToken1IdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Pool` you could get from the connection.
  totalCount: Int!
}

# A `Pool` edge in the connection, with data from `PoolHourDatum`.
type TokenPoolsByPoolHourDatumToken1IdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Pool` at the end of the edge.
  node: Pool

  # Reads and enables pagination through a set of `PoolHourDatum`.
  hourData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection!
}

# A connection to a list of `Token` values, with data from `PoolHourDatum`.
type TokenTokensByPoolHourDatumToken1IdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `PoolHourDatum`, and the cursor to aid in pagination.
  edges: [TokenTokensByPoolHourDatumToken1IdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `PoolHourDatum`.
type TokenTokensByPoolHourDatumToken1IdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `PoolHourDatum`.
  poolHourDataByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolHourDatum`.
    orderBy: [PoolHourDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolHourDatumFilter
  ): PoolHourDataConnection!
}

# A connection to a list of `Pool` values, with data from `PoolDayDatum`.
type TokenPoolsByPoolDayDatumToken0IdAndPoolIdManyToManyConnection {
  # A list of `Pool` objects.
  nodes: [Pool]!

  # A list of edges which contains the `Pool`, info from the `PoolDayDatum`, and the cursor to aid in pagination.
  edges: [TokenPoolsByPoolDayDatumToken0IdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Pool` you could get from the connection.
  totalCount: Int!
}

# A `Pool` edge in the connection, with data from `PoolDayDatum`.
type TokenPoolsByPoolDayDatumToken0IdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Pool` at the end of the edge.
  node: Pool

  # Reads and enables pagination through a set of `PoolDayDatum`.
  dayData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection!
}

# A connection to a list of `Token` values, with data from `PoolDayDatum`.
type TokenTokensByPoolDayDatumToken0IdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `PoolDayDatum`, and the cursor to aid in pagination.
  edges: [TokenTokensByPoolDayDatumToken0IdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `PoolDayDatum`.
type TokenTokensByPoolDayDatumToken0IdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `PoolDayDatum`.
  poolDayDataQuote(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection!
}

# A connection to a list of `Pool` values, with data from `PoolDayDatum`.
type TokenPoolsByPoolDayDatumToken1IdAndPoolIdManyToManyConnection {
  # A list of `Pool` objects.
  nodes: [Pool]!

  # A list of edges which contains the `Pool`, info from the `PoolDayDatum`, and the cursor to aid in pagination.
  edges: [TokenPoolsByPoolDayDatumToken1IdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Pool` you could get from the connection.
  totalCount: Int!
}

# A `Pool` edge in the connection, with data from `PoolDayDatum`.
type TokenPoolsByPoolDayDatumToken1IdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Pool` at the end of the edge.
  node: Pool

  # Reads and enables pagination through a set of `PoolDayDatum`.
  dayData(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection!
}

# A connection to a list of `Token` values, with data from `PoolDayDatum`.
type TokenTokensByPoolDayDatumToken1IdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `PoolDayDatum`, and the cursor to aid in pagination.
  edges: [TokenTokensByPoolDayDatumToken1IdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `PoolDayDatum`.
type TokenTokensByPoolDayDatumToken1IdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `PoolDayDatum`.
  poolDayDataBase(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `PoolDayDatum`.
    orderBy: [PoolDayDataOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: PoolDayDatumFilter
  ): PoolDayDataConnection!
}

# A connection to a list of `Account` values, with data from `DexAction`.
type TokenAccountsByDexActionToken0IdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [TokenAccountsByDexActionToken0IdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `DexAction`.
type TokenAccountsByDexActionToken0IdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Pool` values, with data from `DexAction`.
type TokenPoolsByDexActionToken0IdAndPoolIdManyToManyConnection {
  # A list of `Pool` objects.
  nodes: [Pool]!

  # A list of edges which contains the `Pool`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [TokenPoolsByDexActionToken0IdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Pool` you could get from the connection.
  totalCount: Int!
}

# A `Pool` edge in the connection, with data from `DexAction`.
type TokenPoolsByDexActionToken0IdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Pool` at the end of the edge.
  node: Pool

  # Reads and enables pagination through a set of `DexAction`.
  actions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Token` values, with data from `DexAction`.
type TokenTokensByDexActionToken0IdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [TokenTokensByDexActionToken0IdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `DexAction`.
type TokenTokensByDexActionToken0IdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `DexAction`.
type TokenExtrinsicsByDexActionToken0IdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [TokenExtrinsicsByDexActionToken0IdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `DexAction`.
type TokenExtrinsicsByDexActionToken0IdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Account` values, with data from `DexAction`.
type TokenAccountsByDexActionToken1IdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [TokenAccountsByDexActionToken1IdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `DexAction`.
type TokenAccountsByDexActionToken1IdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Pool` values, with data from `DexAction`.
type TokenPoolsByDexActionToken1IdAndPoolIdManyToManyConnection {
  # A list of `Pool` objects.
  nodes: [Pool]!

  # A list of edges which contains the `Pool`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [TokenPoolsByDexActionToken1IdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Pool` you could get from the connection.
  totalCount: Int!
}

# A `Pool` edge in the connection, with data from `DexAction`.
type TokenPoolsByDexActionToken1IdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Pool` at the end of the edge.
  node: Pool

  # Reads and enables pagination through a set of `DexAction`.
  actions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Token` values, with data from `DexAction`.
type TokenTokensByDexActionToken1IdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [TokenTokensByDexActionToken1IdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `DexAction`.
type TokenTokensByDexActionToken1IdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `DexAction`.
type TokenExtrinsicsByDexActionToken1IdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [TokenExtrinsicsByDexActionToken1IdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `DexAction`.
type TokenExtrinsicsByDexActionToken1IdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A `Transfer` edge in the connection.
type TransfersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Transfer` at the end of the edge.
  node: Transfer
}

# A connection to a list of `Account` values, with data from `Call`.
type CallAccountsByCallParentCallIdAndSignerIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Call`, and the cursor to aid in pagination.
  edges: [CallAccountsByCallParentCallIdAndSignerIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Call`.
type CallAccountsByCallParentCallIdAndSignerIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `Call`.
type CallExtrinsicsByCallParentCallIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `Call`, and the cursor to aid in pagination.
  edges: [CallExtrinsicsByCallParentCallIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `Call`.
type CallExtrinsicsByCallParentCallIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection!
}

# A connection to a list of `Account` values, with data from `Transfer`.
type CallAccountsByTransferCallIdAndFromIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [CallAccountsByTransferCallIdAndFromIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Transfer`.
type CallAccountsByTransferCallIdAndFromIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Transfer`.
  transferOut(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Account` values, with data from `Transfer`.
type CallAccountsByTransferCallIdAndToIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [CallAccountsByTransferCallIdAndToIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Transfer`.
type CallAccountsByTransferCallIdAndToIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Transfer`.
  transferIn(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Token` values, with data from `Transfer`.
type CallTokensByTransferCallIdAndTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [CallTokensByTransferCallIdAndTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `Transfer`.
type CallTokensByTransferCallIdAndTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Extrinsic` values, with data from `Transfer`.
type CallExtrinsicsByTransferCallIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [CallExtrinsicsByTransferCallIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `Transfer`.
type CallExtrinsicsByTransferCallIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A `Call` edge in the connection.
type CallsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Call` at the end of the edge.
  node: Call
}

# A connection to a list of `Event` values.
type EventsConnection {
  # A list of `Event` objects.
  nodes: [Event]!

  # A list of edges which contains the `Event` and cursor to aid in pagination.
  edges: [EventsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Event` you could get from the connection.
  totalCount: Int!
}

type Event implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  index: Int
  section: String
  method: String
  data: JSON
  timestamp: Datetime
  blockNumber: BigFloat
  blockId: String
  extrinsicId: String

  # Reads a single `Block` that is related to this `Event`.
  block: Block

  # Reads a single `Extrinsic` that is related to this `Event`.
  extrinsic: Extrinsic
}

# A `Event` edge in the connection.
type EventsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Event` at the end of the edge.
  node: Event
}

# Methods to use when ordering `Event`.
enum EventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  INDEX_ASC
  INDEX_DESC
  SECTION_ASC
  SECTION_DESC
  METHOD_ASC
  METHOD_DESC
  DATA_ASC
  DATA_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  BLOCK_NUMBER_ASC
  BLOCK_NUMBER_DESC
  BLOCK_ID_ASC
  BLOCK_ID_DESC
  EXTRINSIC_ID_ASC
  EXTRINSIC_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’
input EventFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `index` field.
  index: IntFilter

  # Filter by the object’s `section` field.
  section: StringFilter

  # Filter by the object’s `method` field.
  method: StringFilter

  # Filter by the object’s `data` field.
  data: JSONFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Filter by the object’s `blockNumber` field.
  blockNumber: BigFloatFilter

  # Filter by the object’s `blockId` field.
  blockId: StringFilter

  # Filter by the object’s `extrinsicId` field.
  extrinsicId: StringFilter

  # Checks for all expressions in this list.
  and: [EventFilter!]

  # Checks for any expressions in this list.
  or: [EventFilter!]

  # Negates the expression.
  not: EventFilter
}

# A connection to a list of `NFTAction` values.
type NftActionsConnection {
  # A list of `NFTAction` objects.
  nodes: [NFTAction]!

  # A list of edges which contains the `NFTAction` and cursor to aid in pagination.
  edges: [NftActionsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `NFTAction` you could get from the connection.
  totalCount: Int!
}

type NFTAction implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  accountId: String
  type: String
  subType: String
  data: JSON
  extrinsicId: String
  timestamp: Datetime

  # Reads a single `Account` that is related to this `NFTAction`.
  account: Account

  # Reads a single `Extrinsic` that is related to this `NFTAction`.
  extrinsic: Extrinsic
}

# A `NFTAction` edge in the connection.
type NftActionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `NFTAction` at the end of the edge.
  node: NFTAction
}

# Methods to use when ordering `NFTAction`.
enum NftActionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  TYPE_ASC
  TYPE_DESC
  SUB_TYPE_ASC
  SUB_TYPE_DESC
  DATA_ASC
  DATA_DESC
  EXTRINSIC_ID_ASC
  EXTRINSIC_ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `NFTAction` object types. All fields are combined with a logical ‘and.’
input NFTActionFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `accountId` field.
  accountId: StringFilter

  # Filter by the object’s `type` field.
  type: StringFilter

  # Filter by the object’s `subType` field.
  subType: StringFilter

  # Filter by the object’s `data` field.
  data: JSONFilter

  # Filter by the object’s `extrinsicId` field.
  extrinsicId: StringFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Checks for all expressions in this list.
  and: [NFTActionFilter!]

  # Checks for any expressions in this list.
  or: [NFTActionFilter!]

  # Negates the expression.
  not: NFTActionFilter
}

# A connection to a list of `LoanAction` values.
type LoanActionsConnection {
  # A list of `LoanAction` objects.
  nodes: [LoanAction]!

  # A list of edges which contains the `LoanAction` and cursor to aid in pagination.
  edges: [LoanActionsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `LoanAction` you could get from the connection.
  totalCount: Int!
}

type LoanAction implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  accountId: String
  type: String
  subType: String
  data: JSON
  extrinsicId: String
  timestamp: Datetime

  # Reads a single `Account` that is related to this `LoanAction`.
  account: Account

  # Reads a single `Extrinsic` that is related to this `LoanAction`.
  extrinsic: Extrinsic
}

# A `LoanAction` edge in the connection.
type LoanActionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `LoanAction` at the end of the edge.
  node: LoanAction
}

# Methods to use when ordering `LoanAction`.
enum LoanActionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  TYPE_ASC
  TYPE_DESC
  SUB_TYPE_ASC
  SUB_TYPE_DESC
  DATA_ASC
  DATA_DESC
  EXTRINSIC_ID_ASC
  EXTRINSIC_ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `LoanAction` object types. All fields are combined with a logical ‘and.’
input LoanActionFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `accountId` field.
  accountId: StringFilter

  # Filter by the object’s `type` field.
  type: StringFilter

  # Filter by the object’s `subType` field.
  subType: StringFilter

  # Filter by the object’s `data` field.
  data: JSONFilter

  # Filter by the object’s `extrinsicId` field.
  extrinsicId: StringFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Checks for all expressions in this list.
  and: [LoanActionFilter!]

  # Checks for any expressions in this list.
  or: [LoanActionFilter!]

  # Negates the expression.
  not: LoanActionFilter
}

# A connection to a list of `IncentiveAction` values.
type IncentiveActionsConnection {
  # A list of `IncentiveAction` objects.
  nodes: [IncentiveAction]!

  # A list of edges which contains the `IncentiveAction` and cursor to aid in pagination.
  edges: [IncentiveActionsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `IncentiveAction` you could get from the connection.
  totalCount: Int!
}

type IncentiveAction implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  accountId: String
  type: String
  subType: String
  data: JSON
  extrinsicId: String
  timestamp: Datetime

  # Reads a single `Account` that is related to this `IncentiveAction`.
  account: Account

  # Reads a single `Extrinsic` that is related to this `IncentiveAction`.
  extrinsic: Extrinsic
}

# A `IncentiveAction` edge in the connection.
type IncentiveActionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `IncentiveAction` at the end of the edge.
  node: IncentiveAction
}

# Methods to use when ordering `IncentiveAction`.
enum IncentiveActionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  TYPE_ASC
  TYPE_DESC
  SUB_TYPE_ASC
  SUB_TYPE_DESC
  DATA_ASC
  DATA_DESC
  EXTRINSIC_ID_ASC
  EXTRINSIC_ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `IncentiveAction` object types. All fields are combined with a logical ‘and.’
input IncentiveActionFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `accountId` field.
  accountId: StringFilter

  # Filter by the object’s `type` field.
  type: StringFilter

  # Filter by the object’s `subType` field.
  subType: StringFilter

  # Filter by the object’s `data` field.
  data: JSONFilter

  # Filter by the object’s `extrinsicId` field.
  extrinsicId: StringFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Checks for all expressions in this list.
  and: [IncentiveActionFilter!]

  # Checks for any expressions in this list.
  or: [IncentiveActionFilter!]

  # Negates the expression.
  not: IncentiveActionFilter
}

# A connection to a list of `HomaAction` values.
type HomaActionsConnection {
  # A list of `HomaAction` objects.
  nodes: [HomaAction]!

  # A list of edges which contains the `HomaAction` and cursor to aid in pagination.
  edges: [HomaActionsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `HomaAction` you could get from the connection.
  totalCount: Int!
}

type HomaAction implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  accountId: String
  type: String
  subType: String
  data: JSON
  extrinsicId: String
  timestamp: Datetime

  # Reads a single `Account` that is related to this `HomaAction`.
  account: Account

  # Reads a single `Extrinsic` that is related to this `HomaAction`.
  extrinsic: Extrinsic
}

# A `HomaAction` edge in the connection.
type HomaActionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `HomaAction` at the end of the edge.
  node: HomaAction
}

# Methods to use when ordering `HomaAction`.
enum HomaActionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  TYPE_ASC
  TYPE_DESC
  SUB_TYPE_ASC
  SUB_TYPE_DESC
  DATA_ASC
  DATA_DESC
  EXTRINSIC_ID_ASC
  EXTRINSIC_ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `HomaAction` object types. All fields are combined with a logical ‘and.’
input HomaActionFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `accountId` field.
  accountId: StringFilter

  # Filter by the object’s `type` field.
  type: StringFilter

  # Filter by the object’s `subType` field.
  subType: StringFilter

  # Filter by the object’s `data` field.
  data: JSONFilter

  # Filter by the object’s `extrinsicId` field.
  extrinsicId: StringFilter

  # Filter by the object’s `timestamp` field.
  timestamp: DatetimeFilter

  # Checks for all expressions in this list.
  and: [HomaActionFilter!]

  # Checks for any expressions in this list.
  or: [HomaActionFilter!]

  # Negates the expression.
  not: HomaActionFilter
}

# A connection to a list of `Account` values, with data from `Call`.
type ExtrinsicAccountsByCallExtrinsicIdAndSignerIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Call`, and the cursor to aid in pagination.
  edges: [ExtrinsicAccountsByCallExtrinsicIdAndSignerIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Call`.
type ExtrinsicAccountsByCallExtrinsicIdAndSignerIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection!
}

# A connection to a list of `Call` values, with data from `Call`.
type ExtrinsicCallsByCallExtrinsicIdAndParentCallIdManyToManyConnection {
  # A list of `Call` objects.
  nodes: [Call]!

  # A list of edges which contains the `Call`, info from the `Call`, and the cursor to aid in pagination.
  edges: [ExtrinsicCallsByCallExtrinsicIdAndParentCallIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Call` you could get from the connection.
  totalCount: Int!
}

# A `Call` edge in the connection, with data from `Call`.
type ExtrinsicCallsByCallExtrinsicIdAndParentCallIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Call` at the end of the edge.
  node: Call

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection!
}

# A connection to a list of `Block` values, with data from `Event`.
type ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `Event`, and the cursor to aid in pagination.
  edges: [ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `Event`.
type ExtrinsicBlocksByEventExtrinsicIdAndBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `Event`.
  events(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Event`.
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: EventFilter
  ): EventsConnection!
}

# A connection to a list of `Account` values, with data from `Transfer`.
type ExtrinsicAccountsByTransferExtrinsicIdAndFromIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [ExtrinsicAccountsByTransferExtrinsicIdAndFromIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Transfer`.
type ExtrinsicAccountsByTransferExtrinsicIdAndFromIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Transfer`.
  transferOut(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Account` values, with data from `Transfer`.
type ExtrinsicAccountsByTransferExtrinsicIdAndToIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [ExtrinsicAccountsByTransferExtrinsicIdAndToIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Transfer`.
type ExtrinsicAccountsByTransferExtrinsicIdAndToIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Transfer`.
  transferIn(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Token` values, with data from `Transfer`.
type ExtrinsicTokensByTransferExtrinsicIdAndTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [ExtrinsicTokensByTransferExtrinsicIdAndTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `Transfer`.
type ExtrinsicTokensByTransferExtrinsicIdAndTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Call` values, with data from `Transfer`.
type ExtrinsicCallsByTransferExtrinsicIdAndCallIdManyToManyConnection {
  # A list of `Call` objects.
  nodes: [Call]!

  # A list of edges which contains the `Call`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [ExtrinsicCallsByTransferExtrinsicIdAndCallIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Call` you could get from the connection.
  totalCount: Int!
}

# A `Call` edge in the connection, with data from `Transfer`.
type ExtrinsicCallsByTransferExtrinsicIdAndCallIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Call` at the end of the edge.
  node: Call

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Account` values, with data from `NFTAction`.
type ExtrinsicAccountsByNftActionExtrinsicIdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `NFTAction`, and the cursor to aid in pagination.
  edges: [ExtrinsicAccountsByNftActionExtrinsicIdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `NFTAction`.
type ExtrinsicAccountsByNftActionExtrinsicIdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `NFTAction`.
  nFTActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `NFTAction`.
    orderBy: [NftActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: NFTActionFilter
  ): NftActionsConnection!
}

# A connection to a list of `Account` values, with data from `LoanAction`.
type ExtrinsicAccountsByLoanActionExtrinsicIdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `LoanAction`, and the cursor to aid in pagination.
  edges: [ExtrinsicAccountsByLoanActionExtrinsicIdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `LoanAction`.
type ExtrinsicAccountsByLoanActionExtrinsicIdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `LoanAction`.
  loanActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanAction`.
    orderBy: [LoanActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanActionFilter
  ): LoanActionsConnection!
}

# A connection to a list of `Account` values, with data from `IncentiveAction`.
type ExtrinsicAccountsByIncentiveActionExtrinsicIdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `IncentiveAction`, and the cursor to aid in pagination.
  edges: [ExtrinsicAccountsByIncentiveActionExtrinsicIdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `IncentiveAction`.
type ExtrinsicAccountsByIncentiveActionExtrinsicIdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `IncentiveAction`.
  incentiveActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `IncentiveAction`.
    orderBy: [IncentiveActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: IncentiveActionFilter
  ): IncentiveActionsConnection!
}

# A connection to a list of `Account` values, with data from `HomaAction`.
type ExtrinsicAccountsByHomaActionExtrinsicIdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `HomaAction`, and the cursor to aid in pagination.
  edges: [ExtrinsicAccountsByHomaActionExtrinsicIdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `HomaAction`.
type ExtrinsicAccountsByHomaActionExtrinsicIdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `HomaAction`.
  homaActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `HomaAction`.
    orderBy: [HomaActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: HomaActionFilter
  ): HomaActionsConnection!
}

# A connection to a list of `Account` values, with data from `DexAction`.
type ExtrinsicAccountsByDexActionExtrinsicIdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [ExtrinsicAccountsByDexActionExtrinsicIdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `DexAction`.
type ExtrinsicAccountsByDexActionExtrinsicIdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Pool` values, with data from `DexAction`.
type ExtrinsicPoolsByDexActionExtrinsicIdAndPoolIdManyToManyConnection {
  # A list of `Pool` objects.
  nodes: [Pool]!

  # A list of edges which contains the `Pool`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [ExtrinsicPoolsByDexActionExtrinsicIdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Pool` you could get from the connection.
  totalCount: Int!
}

# A `Pool` edge in the connection, with data from `DexAction`.
type ExtrinsicPoolsByDexActionExtrinsicIdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Pool` at the end of the edge.
  node: Pool

  # Reads and enables pagination through a set of `DexAction`.
  actions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Token` values, with data from `DexAction`.
type ExtrinsicTokensByDexActionExtrinsicIdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [ExtrinsicTokensByDexActionExtrinsicIdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `DexAction`.
type ExtrinsicTokensByDexActionExtrinsicIdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Token` values, with data from `DexAction`.
type ExtrinsicTokensByDexActionExtrinsicIdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [ExtrinsicTokensByDexActionExtrinsicIdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `DexAction`.
type ExtrinsicTokensByDexActionExtrinsicIdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A `Extrinsic` edge in the connection.
type ExtrinsicsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic
}

# A connection to a list of `Account` values, with data from `Extrinsic`.
type BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Extrinsic`, and the cursor to aid in pagination.
  edges: [BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Extrinsic`.
type BlockAccountsByExtrinsicBlockIdAndSignerIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsics(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): ExtrinsicsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `Event`.
type BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `Event`, and the cursor to aid in pagination.
  edges: [BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `Event`.
type BlockExtrinsicsByEventBlockIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `Event`.
  events(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Event`.
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: EventFilter
  ): EventsConnection!
}

# A connection to a list of `Token` values, with data from `OracleFeedRecord`.
type BlockTokensByOracleFeedRecordBlockIdAndTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `OracleFeedRecord`, and the cursor to aid in pagination.
  edges: [BlockTokensByOracleFeedRecordBlockIdAndTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `OracleFeedRecord`.
type BlockTokensByOracleFeedRecordBlockIdAndTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection!
}

# A connection to a list of `Account` values, with data from `OracleFeedRecord`.
type BlockAccountsByOracleFeedRecordBlockIdAndAccountIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `OracleFeedRecord`, and the cursor to aid in pagination.
  edges: [BlockAccountsByOracleFeedRecordBlockIdAndAccountIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `OracleFeedRecord`.
type BlockAccountsByOracleFeedRecordBlockIdAndAccountIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection!
}

# A connection to a list of `Token` values, with data from `LoanParam`.
type BlockTokensByLoanParamStartAtBlockIdAndCollateralIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `LoanParam`, and the cursor to aid in pagination.
  edges: [BlockTokensByLoanParamStartAtBlockIdAndCollateralIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `LoanParam`.
type BlockTokensByLoanParamStartAtBlockIdAndCollateralIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `LoanParam`.
  loanParamsByCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParam`.
    orderBy: [LoanParamsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamFilter
  ): LoanParamsConnection!
}

# A connection to a list of `Token` values, with data from `LoanParamsHistory`.
type BlockTokensByLoanParamsHistoryStartAtBlockIdAndCollateralIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `LoanParamsHistory`, and the cursor to aid in pagination.
  edges: [BlockTokensByLoanParamsHistoryStartAtBlockIdAndCollateralIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `LoanParamsHistory`.
type BlockTokensByLoanParamsHistoryStartAtBlockIdAndCollateralIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistoriesByCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection!
}

# A connection to a list of `Block` values, with data from `LoanParamsHistory`.
type BlockBlocksByLoanParamsHistoryStartAtBlockIdAndEndAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `LoanParamsHistory`, and the cursor to aid in pagination.
  edges: [BlockBlocksByLoanParamsHistoryStartAtBlockIdAndEndAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `LoanParamsHistory`.
type BlockBlocksByLoanParamsHistoryStartAtBlockIdAndEndAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistoriesByEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection!
}

# A connection to a list of `Token` values, with data from `LoanParamsHistory`.
type BlockTokensByLoanParamsHistoryEndAtBlockIdAndCollateralIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `LoanParamsHistory`, and the cursor to aid in pagination.
  edges: [BlockTokensByLoanParamsHistoryEndAtBlockIdAndCollateralIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `LoanParamsHistory`.
type BlockTokensByLoanParamsHistoryEndAtBlockIdAndCollateralIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistoriesByCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection!
}

# A connection to a list of `Block` values, with data from `LoanParamsHistory`.
type BlockBlocksByLoanParamsHistoryEndAtBlockIdAndStartAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `LoanParamsHistory`, and the cursor to aid in pagination.
  edges: [BlockBlocksByLoanParamsHistoryEndAtBlockIdAndStartAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `LoanParamsHistory`.
type BlockBlocksByLoanParamsHistoryEndAtBlockIdAndStartAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `LoanParamsHistory`.
  loanParamsHistoriesByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanParamsHistory`.
    orderBy: [LoanParamsHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanParamsHistoryFilter
  ): LoanParamsHistoriesConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolStartAtBlockIdAndPoolTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [BlockTokensByProvisionPoolStartAtBlockIdAndPoolTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolStartAtBlockIdAndPoolTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByPoolTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolStartAtBlockIdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [BlockTokensByProvisionPoolStartAtBlockIdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolStartAtBlockIdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolStartAtBlockIdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [BlockTokensByProvisionPoolStartAtBlockIdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolStartAtBlockIdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Block` values, with data from `ProvisionPool`.
type BlockBlocksByProvisionPoolStartAtBlockIdAndEndAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [BlockBlocksByProvisionPoolStartAtBlockIdAndEndAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `ProvisionPool`.
type BlockBlocksByProvisionPoolStartAtBlockIdAndEndAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByEndAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolEndAtBlockIdAndPoolTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [BlockTokensByProvisionPoolEndAtBlockIdAndPoolTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolEndAtBlockIdAndPoolTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByPoolTokenId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolEndAtBlockIdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [BlockTokensByProvisionPoolEndAtBlockIdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolEndAtBlockIdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Token` values, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolEndAtBlockIdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [BlockTokensByProvisionPoolEndAtBlockIdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `ProvisionPool`.
type BlockTokensByProvisionPoolEndAtBlockIdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Block` values, with data from `ProvisionPool`.
type BlockBlocksByProvisionPoolEndAtBlockIdAndStartAtBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `ProvisionPool`, and the cursor to aid in pagination.
  edges: [BlockBlocksByProvisionPoolEndAtBlockIdAndStartAtBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `ProvisionPool`.
type BlockBlocksByProvisionPoolEndAtBlockIdAndStartAtBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `ProvisionPool`.
  provisionPoolsByStartAtBlockId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `ProvisionPool`.
    orderBy: [ProvisionPoolsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ProvisionPoolFilter
  ): ProvisionPoolsConnection!
}

# A connection to a list of `Block` values, with data from `Extrinsic`.
type AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `Extrinsic`, and the cursor to aid in pagination.
  edges: [AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `Extrinsic`.
type AccountBlocksByExtrinsicSignerIdAndBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `Extrinsic`.
  extrinsics(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Extrinsic`.
    orderBy: [ExtrinsicsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: ExtrinsicFilter
  ): ExtrinsicsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `Call`.
type AccountExtrinsicsByCallSignerIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `Call`, and the cursor to aid in pagination.
  edges: [AccountExtrinsicsByCallSignerIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `Call`.
type AccountExtrinsicsByCallSignerIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection!
}

# A connection to a list of `Call` values, with data from `Call`.
type AccountCallsByCallSignerIdAndParentCallIdManyToManyConnection {
  # A list of `Call` objects.
  nodes: [Call]!

  # A list of edges which contains the `Call`, info from the `Call`, and the cursor to aid in pagination.
  edges: [AccountCallsByCallSignerIdAndParentCallIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Call` you could get from the connection.
  totalCount: Int!
}

# A `Call` edge in the connection, with data from `Call`.
type AccountCallsByCallSignerIdAndParentCallIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Call` at the end of the edge.
  node: Call

  # Reads and enables pagination through a set of `Call`.
  calls(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Call`.
    orderBy: [CallsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: CallFilter
  ): CallsConnection!
}

# A connection to a list of `Account` values, with data from `Transfer`.
type AccountAccountsByTransferFromIdAndToIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [AccountAccountsByTransferFromIdAndToIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Transfer`.
type AccountAccountsByTransferFromIdAndToIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Transfer`.
  transferIn(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Token` values, with data from `Transfer`.
type AccountTokensByTransferFromIdAndTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [AccountTokensByTransferFromIdAndTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `Transfer`.
type AccountTokensByTransferFromIdAndTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Extrinsic` values, with data from `Transfer`.
type AccountExtrinsicsByTransferFromIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [AccountExtrinsicsByTransferFromIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `Transfer`.
type AccountExtrinsicsByTransferFromIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Call` values, with data from `Transfer`.
type AccountCallsByTransferFromIdAndCallIdManyToManyConnection {
  # A list of `Call` objects.
  nodes: [Call]!

  # A list of edges which contains the `Call`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [AccountCallsByTransferFromIdAndCallIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Call` you could get from the connection.
  totalCount: Int!
}

# A `Call` edge in the connection, with data from `Transfer`.
type AccountCallsByTransferFromIdAndCallIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Call` at the end of the edge.
  node: Call

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Account` values, with data from `Transfer`.
type AccountAccountsByTransferToIdAndFromIdManyToManyConnection {
  # A list of `Account` objects.
  nodes: [Account]!

  # A list of edges which contains the `Account`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [AccountAccountsByTransferToIdAndFromIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Account` you could get from the connection.
  totalCount: Int!
}

# A `Account` edge in the connection, with data from `Transfer`.
type AccountAccountsByTransferToIdAndFromIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account

  # Reads and enables pagination through a set of `Transfer`.
  transferOut(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Token` values, with data from `Transfer`.
type AccountTokensByTransferToIdAndTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [AccountTokensByTransferToIdAndTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `Transfer`.
type AccountTokensByTransferToIdAndTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Extrinsic` values, with data from `Transfer`.
type AccountExtrinsicsByTransferToIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [AccountExtrinsicsByTransferToIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `Transfer`.
type AccountExtrinsicsByTransferToIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Call` values, with data from `Transfer`.
type AccountCallsByTransferToIdAndCallIdManyToManyConnection {
  # A list of `Call` objects.
  nodes: [Call]!

  # A list of edges which contains the `Call`, info from the `Transfer`, and the cursor to aid in pagination.
  edges: [AccountCallsByTransferToIdAndCallIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Call` you could get from the connection.
  totalCount: Int!
}

# A `Call` edge in the connection, with data from `Transfer`.
type AccountCallsByTransferToIdAndCallIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Call` at the end of the edge.
  node: Call

  # Reads and enables pagination through a set of `Transfer`.
  transfers(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `Transfer`.
    orderBy: [TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: TransferFilter
  ): TransfersConnection!
}

# A connection to a list of `Extrinsic` values, with data from `NFTAction`.
type AccountExtrinsicsByNftActionAccountIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `NFTAction`, and the cursor to aid in pagination.
  edges: [AccountExtrinsicsByNftActionAccountIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `NFTAction`.
type AccountExtrinsicsByNftActionAccountIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `NFTAction`.
  nFTActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `NFTAction`.
    orderBy: [NftActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: NFTActionFilter
  ): NftActionsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `LoanAction`.
type AccountExtrinsicsByLoanActionAccountIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `LoanAction`, and the cursor to aid in pagination.
  edges: [AccountExtrinsicsByLoanActionAccountIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `LoanAction`.
type AccountExtrinsicsByLoanActionAccountIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `LoanAction`.
  loanActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanAction`.
    orderBy: [LoanActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanActionFilter
  ): LoanActionsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `IncentiveAction`.
type AccountExtrinsicsByIncentiveActionAccountIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `IncentiveAction`, and the cursor to aid in pagination.
  edges: [AccountExtrinsicsByIncentiveActionAccountIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `IncentiveAction`.
type AccountExtrinsicsByIncentiveActionAccountIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `IncentiveAction`.
  incentiveActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `IncentiveAction`.
    orderBy: [IncentiveActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: IncentiveActionFilter
  ): IncentiveActionsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `HomaAction`.
type AccountExtrinsicsByHomaActionAccountIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `HomaAction`, and the cursor to aid in pagination.
  edges: [AccountExtrinsicsByHomaActionAccountIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `HomaAction`.
type AccountExtrinsicsByHomaActionAccountIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `HomaAction`.
  homaActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `HomaAction`.
    orderBy: [HomaActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: HomaActionFilter
  ): HomaActionsConnection!
}

# A connection to a list of `Token` values, with data from `OracleFeedRecord`.
type AccountTokensByOracleFeedRecordAccountIdAndTokenIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `OracleFeedRecord`, and the cursor to aid in pagination.
  edges: [AccountTokensByOracleFeedRecordAccountIdAndTokenIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `OracleFeedRecord`.
type AccountTokensByOracleFeedRecordAccountIdAndTokenIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection!
}

# A connection to a list of `Block` values, with data from `OracleFeedRecord`.
type AccountBlocksByOracleFeedRecordAccountIdAndBlockIdManyToManyConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block`, info from the `OracleFeedRecord`, and the cursor to aid in pagination.
  edges: [AccountBlocksByOracleFeedRecordAccountIdAndBlockIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection, with data from `OracleFeedRecord`.
type AccountBlocksByOracleFeedRecordAccountIdAndBlockIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block

  # Reads and enables pagination through a set of `OracleFeedRecord`.
  oracleFeedRecords(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `OracleFeedRecord`.
    orderBy: [OracleFeedRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: OracleFeedRecordFilter
  ): OracleFeedRecordsConnection!
}

# A connection to a list of `Token` values, with data from `LoanPosition`.
type AccountTokensByLoanPositionOwnerIdAndCollateralIdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `LoanPosition`, and the cursor to aid in pagination.
  edges: [AccountTokensByLoanPositionOwnerIdAndCollateralIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `LoanPosition`.
type AccountTokensByLoanPositionOwnerIdAndCollateralIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `LoanPosition`.
  loanPositionsByCollateralId(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `LoanPosition`.
    orderBy: [LoanPositionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: LoanPositionFilter
  ): LoanPositionsConnection!
}

# A connection to a list of `Pool` values, with data from `DexAction`.
type AccountPoolsByDexActionAccountIdAndPoolIdManyToManyConnection {
  # A list of `Pool` objects.
  nodes: [Pool]!

  # A list of edges which contains the `Pool`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [AccountPoolsByDexActionAccountIdAndPoolIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Pool` you could get from the connection.
  totalCount: Int!
}

# A `Pool` edge in the connection, with data from `DexAction`.
type AccountPoolsByDexActionAccountIdAndPoolIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Pool` at the end of the edge.
  node: Pool

  # Reads and enables pagination through a set of `DexAction`.
  actions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Token` values, with data from `DexAction`.
type AccountTokensByDexActionAccountIdAndToken0IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [AccountTokensByDexActionAccountIdAndToken0IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `DexAction`.
type AccountTokensByDexActionAccountIdAndToken0IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken0Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Token` values, with data from `DexAction`.
type AccountTokensByDexActionAccountIdAndToken1IdManyToManyConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [AccountTokensByDexActionAccountIdAndToken1IdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection, with data from `DexAction`.
type AccountTokensByDexActionAccountIdAndToken1IdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token

  # Reads and enables pagination through a set of `DexAction`.
  dexActionsByToken1Id(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A connection to a list of `Extrinsic` values, with data from `DexAction`.
type AccountExtrinsicsByDexActionAccountIdAndExtrinsicIdManyToManyConnection {
  # A list of `Extrinsic` objects.
  nodes: [Extrinsic]!

  # A list of edges which contains the `Extrinsic`, info from the `DexAction`, and the cursor to aid in pagination.
  edges: [AccountExtrinsicsByDexActionAccountIdAndExtrinsicIdManyToManyEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Extrinsic` you could get from the connection.
  totalCount: Int!
}

# A `Extrinsic` edge in the connection, with data from `DexAction`.
type AccountExtrinsicsByDexActionAccountIdAndExtrinsicIdManyToManyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Extrinsic` at the end of the edge.
  node: Extrinsic

  # Reads and enables pagination through a set of `DexAction`.
  dexActions(
    # Only read the first `n` values of the set.
    first: Int

    # Only read the last `n` values of the set.
    last: Int

    # Skip the first `n` values from our `after` cursor, an alternative to cursor
    # based pagination. May not be used with `last`.
    offset: Int

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # The method to use when ordering `DexAction`.
    orderBy: [DexActionsOrderBy!] = [PRIMARY_KEY_ASC]

    # A filter to be used in determining which values should be returned by the collection.
    filter: DexActionFilter
  ): DexActionsConnection!
}

# A `Account` edge in the connection.
type AccountsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Account` at the end of the edge.
  node: Account
}

# A connection to a list of `Block` values.
type BlocksConnection {
  # A list of `Block` objects.
  nodes: [Block]!

  # A list of edges which contains the `Block` and cursor to aid in pagination.
  edges: [BlocksEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Block` you could get from the connection.
  totalCount: Int!
}

# A `Block` edge in the connection.
type BlocksEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Block` at the end of the edge.
  node: Block
}

# A connection to a list of `DexDayDatum` values.
type DexDayDataConnection {
  # A list of `DexDayDatum` objects.
  nodes: [DexDayDatum]!

  # A list of edges which contains the `DexDayDatum` and cursor to aid in pagination.
  edges: [DexDayDataEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `DexDayDatum` you could get from the connection.
  totalCount: Int!
}

type DexDayDatum implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  poolCount: Int
  date: Datetime
  dailyVolumeUSD: String
  totalVolumeUSD: String
  totalTVLUSD: String
}

# A `DexDayDatum` edge in the connection.
type DexDayDataEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `DexDayDatum` at the end of the edge.
  node: DexDayDatum
}

# Methods to use when ordering `DexDayDatum`.
enum DexDayDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_COUNT_ASC
  POOL_COUNT_DESC
  DATE_ASC
  DATE_DESC
  DAILY_VOLUME_U_S_D_ASC
  DAILY_VOLUME_U_S_D_DESC
  TOTAL_VOLUME_U_S_D_ASC
  TOTAL_VOLUME_U_S_D_DESC
  TOTAL_T_V_L_U_S_D_ASC
  TOTAL_T_V_L_U_S_D_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `DexDayDatum` object types. All fields are combined with a logical ‘and.’
input DexDayDatumFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `poolCount` field.
  poolCount: IntFilter

  # Filter by the object’s `date` field.
  date: DatetimeFilter

  # Filter by the object’s `dailyVolumeUSD` field.
  dailyVolumeUSD: StringFilter

  # Filter by the object’s `totalVolumeUSD` field.
  totalVolumeUSD: StringFilter

  # Filter by the object’s `totalTVLUSD` field.
  totalTVLUSD: StringFilter

  # Checks for all expressions in this list.
  and: [DexDayDatumFilter!]

  # Checks for any expressions in this list.
  or: [DexDayDatumFilter!]

  # Negates the expression.
  not: DexDayDatumFilter
}

# A connection to a list of `Dex` values.
type DexesConnection {
  # A list of `Dex` objects.
  nodes: [Dex]!

  # A list of edges which contains the `Dex` and cursor to aid in pagination.
  edges: [DexesEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Dex` you could get from the connection.
  totalCount: Int!
}

type Dex implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  poolCount: Int
  totalVolumeUSD: String
  totalTVLUSD: String
}

# A `Dex` edge in the connection.
type DexesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Dex` at the end of the edge.
  node: Dex
}

# Methods to use when ordering `Dex`.
enum DexesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POOL_COUNT_ASC
  POOL_COUNT_DESC
  TOTAL_VOLUME_U_S_D_ASC
  TOTAL_VOLUME_U_S_D_DESC
  TOTAL_T_V_L_U_S_D_ASC
  TOTAL_T_V_L_U_S_D_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `Dex` object types. All fields are combined with a logical ‘and.’
input DexFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `poolCount` field.
  poolCount: IntFilter

  # Filter by the object’s `totalVolumeUSD` field.
  totalVolumeUSD: StringFilter

  # Filter by the object’s `totalTVLUSD` field.
  totalTVLUSD: StringFilter

  # Checks for all expressions in this list.
  and: [DexFilter!]

  # Checks for any expressions in this list.
  or: [DexFilter!]

  # Negates the expression.
  not: DexFilter
}

# A connection to a list of `PriceBundle` values.
type PriceBundlesConnection {
  # A list of `PriceBundle` objects.
  nodes: [PriceBundle]!

  # A list of edges which contains the `PriceBundle` and cursor to aid in pagination.
  edges: [PriceBundlesEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `PriceBundle` you could get from the connection.
  totalCount: Int!
}

type PriceBundle implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  ksm: String
}

# A `PriceBundle` edge in the connection.
type PriceBundlesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `PriceBundle` at the end of the edge.
  node: PriceBundle
}

# Methods to use when ordering `PriceBundle`.
enum PriceBundlesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  KSM_ASC
  KSM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `PriceBundle` object types. All fields are combined with a logical ‘and.’
input PriceBundleFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `ksm` field.
  ksm: StringFilter

  # Checks for all expressions in this list.
  and: [PriceBundleFilter!]

  # Checks for any expressions in this list.
  or: [PriceBundleFilter!]

  # Negates the expression.
  not: PriceBundleFilter
}

# A connection to a list of `PriceRecord` values.
type PriceRecordsConnection {
  # A list of `PriceRecord` objects.
  nodes: [PriceRecord]!

  # A list of edges which contains the `PriceRecord` and cursor to aid in pagination.
  edges: [PriceRecordsEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `PriceRecord` you could get from the connection.
  totalCount: Int!
}

type PriceRecord implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: String!
  ksm: String
}

# A `PriceRecord` edge in the connection.
type PriceRecordsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `PriceRecord` at the end of the edge.
  node: PriceRecord
}

# Methods to use when ordering `PriceRecord`.
enum PriceRecordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  KSM_ASC
  KSM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

# A filter to be used against `PriceRecord` object types. All fields are combined with a logical ‘and.’
input PriceRecordFilter {
  # Filter by the object’s `id` field.
  id: StringFilter

  # Filter by the object’s `ksm` field.
  ksm: StringFilter

  # Checks for all expressions in this list.
  and: [PriceRecordFilter!]

  # Checks for any expressions in this list.
  or: [PriceRecordFilter!]

  # Negates the expression.
  not: PriceRecordFilter
}

# A connection to a list of `Token` values.
type TokensConnection {
  # A list of `Token` objects.
  nodes: [Token]!

  # A list of edges which contains the `Token` and cursor to aid in pagination.
  edges: [TokensEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* `Token` you could get from the connection.
  totalCount: Int!
}

# A `Token` edge in the connection.
type TokensEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The `Token` at the end of the edge.
  node: Token
}

type _Metadata {
  lastProcessedHeight: Int
  lastProcessedTimestamp: Date
  targetHeight: Int
  chain: String
  specName: String
  genesisHash: String
  indexerHealthy: Boolean
  indexerNodeVersion: String
  queryNodeVersion: String
}

# The day, does not include a time.
scalar Date
